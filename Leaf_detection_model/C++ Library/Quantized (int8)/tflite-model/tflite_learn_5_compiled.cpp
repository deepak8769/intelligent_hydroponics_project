/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.11.2023 13:52:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242624;
#else
constexpr int kTensorArenaSize = 241600;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 78,68,74, 64,63,67, -110,33,-127, 
  /* [1][1][][] */ 71,69,69, 65,71,67, -67,63,59, 
  /* [1][2][][] */ 71,75,70, 72,73,70, -50,67,69, 
  /* [2][0][][] */ 77,86,105, 84,123,108, 99,85,112, 
  /* [2][1][][] */ 53,94,105, 81,127,98, 86,92,105, 
  /* [2][2][][] */ -106,74,111, 113,84,99, 95,79,108, 
  /* [3][0][][] */ 6,44,-1, 41,59,15, 38,42,32, 
  /* [3][1][][] */ -33,1,-127, 4,55,-66, 57,83,44, 
  /* [3][2][][] */ -13,7,12, -14,0,-29, 19,23,-1, 
  /* [4][0][][] */ 66,67,-71, 7,70,-42, -16,101,-28, 
  /* [4][1][][] */ 3,67,-53, -7,85,-41, -20,28,-22, 
  /* [4][2][][] */ -25,127,-45, -20,20,-32, -21,-16,-21, 
  /* [5][0][][] */ 61,73,127, 108,94,108, 113,103,70, 
  /* [5][1][][] */ 68,72,43, 92,82,60, 96,96,58, 
  /* [5][2][][] */ 61,80,88, 85,91,65, 70,87,30, 
  /* [6][0][][] */ -49,-93,45, -43,-101,-72, -61,-71,-66, 
  /* [6][1][][] */ -55,-124,-29, -44,-127,-63, -64,-76,-66, 
  /* [6][2][][] */ -59,-91,-45, -62,-90,-77, -71,-62,-71, 
  /* [7][0][][] */ -3,33,8, 59,43,39, 114,46,103, 
  /* [7][1][][] */ 20,37,22, 99,34,38, 127,47,98, 
  /* [7][2][][] */ 3,46,8, 16,51,8, 96,56,66, 
  /* [8][0][][] */ -124,127,-127, -126,127,-127, -126,127,-127, 
  /* [8][1][][] */ -124,127,-127, -125,127,-127, -126,127,-127, 
  /* [8][2][][] */ -125,127,-127, -125,127,-127, -125,127,-127, 
  /* [9][0][][] */ 64,79,74, 77,109,78, 87,125,74, 
  /* [9][1][][] */ 78,127,71, -47,61,92, -72,16,85, 
  /* [9][2][][] */ 8,17,58, -11,-32,54, 41,56,52, 
  /* [10][0][][] */ -77,-109,-75, -32,24,-45, -67,-67,-62, 
  /* [10][1][][] */ -105,-127,-72, 1,49,-49, -74,-78,-61, 
  /* [10][2][][] */ -84,-65,-60, -32,-32,-70, -68,-59,-56, 
  /* [11][0][][] */ 50,98,9, 67,105,20, 90,99,44, 
  /* [11][1][][] */ 45,86,8, 66,100,19, 92,107,48, 
  /* [11][2][][] */ 99,99,79, 121,127,104, 99,111,88, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ 22,-6,42, 16,-14,37, 47,42,49, 
  /* [13][1][][] */ 89,119,61, 86,127,67, 57,61,59, 
  /* [13][2][][] */ 47,40,53, 53,41,51, 53,54,50, 
  /* [14][0][][] */ 15,-41,44, -43,-79,13, -41,-53,-21, 
  /* [14][1][][] */ 6,-23,51, -54,-90,40, -50,-82,-8, 
  /* [14][2][][] */ 35,72,66, -27,-51,127, -32,-58,4, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.014800084754824638, 0.0077037746086716652, 0.012982720509171486, 0.012513536028563976, 0.012805345468223095, 0.00066327711101621389, 0.013416554778814316, 0.00065545574761927128, 0.0013117301277816296, 8.9486224169377238e-05, 0.0011343148071318865, 2.9411381774480105e-07, 0.0038344634231179953, 0.011784729547798634, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, -171400, -576228, 10707, 36830, -435813, 2032596, -386643, 781418, 534159, 11209699, 1274297, -1073741824, -36432, 94349, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 5.8039549912791699e-05, 3.021088195964694e-05, 5.0912633014377207e-05, 4.9072692490881309e-05, 5.0217044190503657e-05, 2.6010868623416172e-06, 5.2613944717450067e-05, 2.5704148356453516e-06, 5.1440401875879616e-06, 3.5092639905087708e-07, 4.4482935663836543e-06, 1.1533876076441629e-09, 1.5037112461868674e-05, 4.6214627218432724e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,-4,26,120,47,-38,-80,30,65,3,-16,34,-127,0,49,-73, 51,-11,64,-127,127,-127,-127,64,78,127,-127,38,-105,-12,127,-25, 24,44,-127,0,-103,16,89,-127,87,-20,13,11,61,7,-96,-29, 
  /* [0][1][][] */ -127,-127,-18,-16,-45,4,26,-57,24,6,-6,-81,-49,2,-31,-14, -78,65,4,10,-40,-32,-11,-42,111,-80,10,-16,-104,127,4,23, 14,16,-102,-6,-9,13,23,-71,121,12,7,13,-21,-1,2,43, 
  /* [0][2][][] */ -115,101,-104,-6,-2,22,36,-86,76,6,-8,-19,40,4,-27,23, 23,23,-74,-3,-40,28,30,-73,127,-7,-7,48,-58,-6,-27,-111, 21,27,-75,-4,15,6,-11,-64,99,9,9,-127,107,2,22,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0012400065315887332, 0.010385454632341862, 0.020718337967991829, 0.032713782042264938, 0.018417015671730042, 0.0040366323664784431, 0.021667752414941788, 0.00011854383046738803, 0.0039850096218287945, 0.00051533005898818374, 0.03514588251709938, 0.030907778069376945, 0.011706948280334473, 0.035961195826530457, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 39836, -7094, 8425, 12005, 7800, 54876, 17612, -886062, 9963, 403397, 19119, -445, -17378, -1752, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 2.9176624593674205e-05, 0.00024436364765278995, 0.0004874903243035078, 0.00076973607065156102, 0.00043334154179319739, 9.4979586720000952e-05, 0.00050982949323952198, 2.7892665457329713e-06, 9.3764931079931557e-05, 1.2125413377361838e-05, 0.00082696194294840097, 0.00072724185883998871, 0.0002754575980361551, 0.00084614579100161791, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,12,-1,23,127,-21,-5,-15,20,-28,-24,17,0,-4,21,0, 
  /* [1][0][][] */ 0,31,-69,43,77,100,2,59,45,-51,-4,-29,0,-63,-127,0, 
  /* [2][0][][] */ 0,-62,-52,-36,91,3,-73,-30,-50,75,72,4,0,127,-74,0, 
  /* [3][0][][] */ 0,37,9,26,127,-67,59,-6,40,-42,-29,56,0,-15,13,0, 
  /* [4][0][][] */ 0,-49,-68,73,52,123,95,99,-72,31,-67,127,0,-57,97,0, 
  /* [5][0][][] */ 0,44,-50,60,64,-51,-7,-58,-59,40,-64,13,0,-85,127,0, 
  /* [6][0][][] */ 0,-46,23,45,-127,111,39,117,55,-50,-14,68,0,-100,26,0, 
  /* [7][0][][] */ 0,52,81,111,94,-24,35,79,59,3,2,127,0,-9,103,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.044884875416755676, 0.025893000885844231, 0.027671905234456062, 0.031253661960363388, 0.0077385148033499718, 0.0074552656151354313, 0.033754020929336548, 0.017859240993857384, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -2427, -29849, 13, -11748, -61912, 13572, -32327, -52011, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0010561147937551141, 0.00060924707213416696, 0.00065110367722809315, 0.00073538027936592698, 0.00018208270194008946, 0.00017541801207698882, 0.00079421227565035224, 0.00042021743138320744, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 26,79,50,-96,24,99,-97,-127, 
  /* [1][0][][] */ 127,74,0,48,-69,-67,58,96, 
  /* [2][0][][] */ -86,-68,-45,-127,33,-33,44,-9, 
  /* [3][0][][] */ 113,-12,-71,127,60,-77,97,90, 
  /* [4][0][][] */ -127,-112,-24,78,88,-115,67,39, 
  /* [5][0][][] */ 127,-29,-33,94,21,40,-84,56, 
  /* [6][0][][] */ -93,-127,-9,-3,-84,69,-48,-75, 
  /* [7][0][][] */ 123,-84,112,102,95,127,-61,87, 
  /* [8][0][][] */ 70,-23,-127,115,-85,28,52,61, 
  /* [9][0][][] */ 80,21,103,99,-97,127,-100,-19, 
  /* [10][0][][] */ 56,-127,87,108,22,114,-79,-6, 
  /* [11][0][][] */ 116,127,26,-68,-48,19,79,28, 
  /* [12][0][][] */ 103,-104,-1,127,55,-34,66,106, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -112,72,-34,-30,-56,57,127,-66, 
  /* [15][0][][] */ -95,80,87,-53,-127,-90,-72,-105, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ -60,-20,64,-67,30,-52,69,-127, 
  /* [18][0][][] */ 28,-107,-127,66,-61,20,61,87, 
  /* [19][0][][] */ 53,-127,-43,-22,-33,44,-34,25, 
  /* [20][0][][] */ 60,-72,30,127,78,46,101,35, 
  /* [21][0][][] */ -80,-91,-53,104,95,-105,127,104, 
  /* [22][0][][] */ -15,-117,55,-76,44,26,-127,63, 
  /* [23][0][][] */ 31,118,-83,-10,-66,-37,127,-60, 
  /* [24][0][][] */ 127,11,127,-35,62,-65,-92,104, 
  /* [25][0][][] */ -44,30,-71,79,-17,40,-127,-24, 
  /* [26][0][][] */ 115,85,-89,127,106,70,-76,-17, 
  /* [27][0][][] */ 127,59,85,8,-56,37,4,52, 
  /* [28][0][][] */ -107,-120,-121,-102,-107,-68,124,127, 
  /* [29][0][][] */ -72,103,127,-90,-90,88,-65,-92, 
  /* [30][0][][] */ -127,-109,-64,-50,-74,-91,101,52, 
  /* [31][0][][] */ 127,-90,7,-80,56,94,-114,-3, 
  /* [32][0][][] */ -17,-85,38,9,-127,-7,-97,-44, 
  /* [33][0][][] */ -31,127,-19,-19,-102,-91,-104,-2, 
  /* [34][0][][] */ 30,82,-127,50,85,-67,-125,56, 
  /* [35][0][][] */ 121,23,83,127,86,108,-55,-64, 
  /* [36][0][][] */ 39,-13,-114,99,99,-87,127,116, 
  /* [37][0][][] */ -45,91,127,-120,56,79,41,-116, 
  /* [38][0][][] */ 127,96,102,47,-30,38,-62,72, 
  /* [39][0][][] */ -42,103,38,-42,-91,58,-73,-127, 
  /* [40][0][][] */ 106,101,127,71,42,55,-74,-118, 
  /* [41][0][][] */ 17,-74,-105,-39,90,11,102,127, 
  /* [42][0][][] */ 127,-79,124,49,64,84,-83,-23, 
  /* [43][0][][] */ 80,-65,-126,127,-98,-88,87,39, 
  /* [44][0][][] */ -51,63,-99,-3,124,59,127,6, 
  /* [45][0][][] */ -29,127,19,-65,-76,-77,45,35, 
  /* [46][0][][] */ 44,-24,-124,94,86,86,-127,48, 
  /* [47][0][][] */ 67,-75,-50,127,-45,-86,109,95, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00077221647370606661, 0.00084589025937020779, 0.0011229107622057199, 0.00069435324985533953, 4.3130596168339252e-05, 0.00080250954488292336, 0.00014716795703861862, 0.00058343762066215277, 0.00038002044311724603, 0.0037863305769860744, 0.00072555395308881998, 0.0028544019442051649, 0.00064634298905730247, 3.937008052901092e-09, 0.00071687862509861588, 9.2146656243130565e-05, 3.937008052901092e-09, 0.00450940802693367, 0.0016301928553730249, 0.00057254848070442677, 0.00089498097077012062, 0.004749649204313755, 0.00048789428547024727, 0.0038537750951945782, 0.0017452344764024019, 0.0036054556258022785, 0.0025019736494868994, 0.0027977211866527796, 0.00036554847611114383, 0.0010762007441371679, 0.0001412171550327912, 0.00041664365562610328, 0.0024933610111474991, 0.014483307488262653, 0.00048653077101334929, 0.00055271666496992111, 0.0035324105992913246, 0.00047923284000717103, 0.0013893694849684834, 0.000407079525757581, 0.00090444314992055297, 0.0013139636721462011, 0.00094452546909451485, 0.011866554617881775, 0.00037234890623949468, 0.00075203308369964361, 0.00047999760136008263, 0.00025460822507739067, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { -17142, 2908, -5616, 1702, 249535, 11064, 61727, -12538, 19740, -431, 8817, -622, 3070, -142206448, 17593, 177091, -114796416, -1804, -1478, 18589, -3797, -902, -992, -327, 6271, 468, 1419, 1451, 12765, 13778, 71167, 29273, 14, 1153, 12140, -8661, 824, 18800, -3500, 33563, 13408, -5975, 2668, 122, 37685, 2536, 22645, 24631, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00022369720682036132, 0.0002450391766615212, 0.00032528702286072075, 0.0002011416363529861, 1.249415709025925e-05, 0.00023247256467584521, 4.2631909309420735e-05, 0.0001690113713266328, 0.00011008508590748534, 0.0010968318674713373, 0.00021017991821281612, 0.00082686886889860034, 0.00018723393441177905, 1.1404803768044758e-09, 0.00020766683155670762, 2.6693227482610382e-05, 1.1404803768044758e-09, 0.0013062943471595645, 0.00047223753063008189, 0.0001658569963183254, 0.00025925989029929042, 0.0013758878922089934, 0.00014133419608697295, 0.0011163692688569427, 0.00050556298810988665, 0.0010444355430081487, 0.00072477670619264245, 0.00081044947728514671, 0.00010589281737338752, 0.00031175598269328475, 4.0908067603595555e-05, 0.0001206941669806838, 0.00072228180943056941, 0.0041955537162721157, 0.00014093921345192939, 0.00016011207480914891, 0.0010232757776975632, 0.00013882512575946748, 0.00040247532888315618, 0.00011792361328843981, 0.0002620008890517056, 0.00038063162355683744, 0.00027361203683540225, 0.003437527222558856, 0.00010786277562147006, 0.00021785045100841671, 0.00013904666411690414, 7.3755421908572316e-05, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -16,-62,-127,3,-28,94,-89,-34,1,-40,31,57,-10,-71,-127,-72,-113,39,37,36,-21,40,-125,-21,18,-73,-105,-42,-17,34,127,84,-46,97,51,-18,71,91,-104,54,127,45,64,27,-36,63,-101,51, 72,22,-21,44,11,-61,-81,-37,20,-16,-70,68,48,-82,-13,17,-52,58,127,49,57,-115,-127,-127,65,-113,-30,-14,47,-9,-42,-12,44,127,-41,-97,-20,127,-55,127,69,63,127,127,-7,51,-127,66, -26,63,-56,-34,-81,-42,-78,-43,107,4,-127,-45,-36,-71,9,-59,-127,95,-122,18,-26,3,29,-80,-52,-32,-127,38,49,-13,-23,28,88,15,-40,24,-44,-10,4,-16,7,49,75,100,-30,20,-70,-61, 
  /* [0][1][][] */ -32,-114,-106,35,-42,127,111,-127,12,-82,23,123,117,-64,-32,-127,-121,-10,63,65,59,-109,-51,-113,66,-90,-41,-127,-127,-49,120,127,3,2,73,-28,110,-57,-127,74,12,61,99,29,-127,87,35,127, 127,-14,-109,127,68,107,127,-111,17,-127,-58,109,127,-14,8,84,-60,-41,99,73,127,-127,-65,-61,127,-105,-71,-15,82,-99,-85,61,48,20,31,-127,57,-107,-65,27,-38,127,55,121,-123,79,72,103, -8,75,-101,95,-127,28,4,-42,127,-43,-5,43,72,-70,0,-91,-37,-21,85,77,58,14,-17,-76,40,-69,-54,-38,-31,-127,-50,43,56,25,-127,23,0,-111,16,-69,-12,39,31,75,-76,62,25,-61, 
  /* [0][2][][] */ -42,-127,-39,-16,-34,58,-6,-57,-14,-70,26,127,16,-127,57,-82,-43,-127,116,-68,-3,21,-40,-26,7,-20,-52,-104,-67,26,26,113,127,23,78,46,127,61,-26,75,-13,37,-16,-7,52,78,-16,57, 71,-22,-68,24,29,48,19,3,-76,-20,18,75,9,-26,-7,69,-24,-48,90,-127,23,15,-28,-109,46,-127,-80,10,60,80,-72,87,32,-1,-46,6,74,98,9,14,-32,105,53,87,104,127,-32,71, -11,49,-86,-10,-98,-35,-9,45,50,-26,22,36,-18,-43,-86,-63,-93,24,78,-21,-15,23,-13,-52,-12,-68,-58,-108,-23,10,-30,91,-37,-8,-66,36,-11,-29,78,-95,-6,46,-30,32,36,71,-26,-85, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 2.9104282855987549, 0.0023882782552391291, 0.0088568050414323807, 0.00067932641832157969, 0.0087468968704342842, 0.0068036536686122417, 0.0026695150882005692, 0.0059021846391260624, 0.001038955757394433, 0.00053743121679872274, 0.0014093893114477396, 0.0017816839972510934, 0.0056866733357310295, 0.23551659286022186, 0.0038457454647868872, 0.0065924515947699547, 0.1168077290058136, 0.0066059133969247341, 0.0020150062628090382, 0.0011283912463113666, 0.0010115249315276742, 0.006209028884768486, 0.0051006828434765339, 0.00080886657815426588, 0.0026199475396424532, 0.0010086753172799945, 0.0013807473005726933, 0.003213128075003624, 2.1546804418903776e-05, 0.00086262670811265707, 0.025488222017884254, 0.00052189547568559647, 0.0052327355369925499, 0.0002739904448390007, 0.00080409814836457372, 0.0024826740846037865, 0.0023620142601430416, 0.002009793883189559, 0.0053233830258250237, 0.0048462594859302044, 0.0079580331221222878, 0.0069475322961807251, 0.0029125290457159281, 7.3203162173740566e-05, 0.0030819277744740248, 0.002192074665799737, 0.0020551707129925489, 0.00082272209692746401, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 71, -51423, 12753, 102457, 32732, -601, -21381, 6399, 156679, -97052, -30357, 53431, -24740, -127, 56960, 55507, -204, -1242, 73758, 54979, -23092, -26830, 72487, -16517, 9332, -14391, 58874, 30538, -3138903, -53045, -3100, -181430, -25369, -132576, 231937, 31928, -43408, -46893, 44325, -10243, -3288, 7780, 8206, -933339, 21769, 119998, 5399, 44723, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.06848067045211792, 5.6194781791418791e-05, 0.00020839541684836149, 1.5984151104930788e-05, 0.00020580933778546751, 0.00016008596867322922, 6.2812119722366333e-05, 0.00013887493696529418, 2.4446018869639374e-05, 1.2645440619962756e-05, 3.3162101317429915e-05, 4.1921975935110822e-05, 0.00013380407472141087, 0.005541567225009203, 9.0488130808807909e-05, 0.00015511650417465717, 0.0027484172023832798, 0.00015543325571343303, 4.7411911509698257e-05, 2.6550382244749926e-05, 2.3800586859579198e-05, 0.00014609479694627225, 0.00012001606955891475, 1.9032155250897631e-05, 6.1645827372558415e-05, 2.3733537091175094e-05, 3.2488173019373789e-05, 7.5603013101499528e-05, 5.0698366749202251e-07, 2.0297098672017455e-05, 0.00059972290182486176, 1.2279893780942075e-05, 0.00012312318722251803, 6.4468340497114696e-06, 1.8919956346508116e-05, 5.8415862440597266e-05, 5.5576805607415736e-05, 4.7289267968153581e-05, 0.00012525607598945498, 0.00011402963718865067, 0.00018724784604273736, 0.00016347135533578694, 6.8530098360497504e-05, 1.7224273278770852e-06, 7.2515947977080941e-05, 5.1578226702986285e-05, 4.8356960178352892e-05, 1.9358167264726944e-05, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ 25,16,10,24,-23,86,28,34,-28,38,3,-30,80,0,-35,39,0,25,43,-4,73,48,16,45,79,64,58,29,-64,-51,-127,2,89,48,-20,59,75,-52,-71,-6,47,18,-15,46,-40,54,-2,10, 
  /* [1][0][][] */ -39,16,91,-52,-93,127,14,63,67,42,-51,44,-41,0,-28,-96,0,-32,-42,-67,-7,-45,29,-1,0,31,79,-49,13,47,-62,-64,9,45,-10,-81,91,-90,-63,-67,-24,-45,-43,-54,-33,-57,50,-3, 
  /* [2][0][][] */ 29,-45,76,-5,15,38,-10,-19,-27,19,38,84,44,0,-28,-10,0,-127,-50,38,30,-35,59,26,47,49,50,-34,52,-37,-50,48,-67,-24,-30,-7,-31,-31,3,41,-33,-87,-8,34,8,-1,-3,39, 
  /* [3][0][][] */ -36,-72,-30,-22,-111,127,96,-86,85,-41,-111,61,80,0,92,-5,0,41,68,-54,28,-46,-46,-31,71,52,-14,-51,-49,10,58,46,33,95,-6,60,-33,-72,-94,-31,106,75,76,-36,28,98,64,71, 
  /* [4][0][][] */ -40,54,56,21,-52,-65,-6,-8,25,-28,-4,21,-65,0,61,-37,0,-39,-41,31,-22,-36,-38,-25,-54,-45,-31,64,-4,-1,-127,-24,-11,-41,26,16,-24,28,48,-26,54,-75,34,-34,36,-21,-67,-3, 
  /* [5][0][][] */ -50,-44,-36,37,-24,82,56,0,-31,23,-2,41,60,0,114,27,0,2,35,-13,37,-43,-10,47,61,18,55,-52,12,-51,47,42,85,33,31,41,10,-40,-85,55,127,34,70,48,59,-44,-35,56, 
  /* [6][0][][] */ -67,-127,-41,-63,-38,61,32,62,-115,25,7,101,65,0,44,42,0,66,67,-75,58,69,74,40,81,81,63,-53,27,-122,127,70,104,63,-62,63,32,-67,-85,58,-81,55,91,54,-52,-87,-104,49, 
  /* [7][0][][] */ -86,-61,-59,53,102,53,34,63,-56,51,-12,37,42,0,65,79,0,54,44,-17,47,50,47,-53,44,39,59,47,-10,65,82,49,-77,40,48,42,-127,-42,-35,74,-51,53,-72,48,-25,-59,-45,52, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.015612021088600159, 0.014105236157774925, 0.021642671898007393, 0.0089338850229978561, 0.018183231353759766, 0.011011133901774883, 0.0058464016765356064, 0.006715941708534956, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -37654, 29294, -20216, -82900, 24549, -43537, -7073, -24535, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00036734167952090502, 0.00033188791712746024, 0.00050923932576552033, 0.00021020906569901854, 0.00042784074321389198, 0.00025908550014719367, 0.00013756239786744118, 0.00015802215784788132, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -84,-127,-99,-94,65,-103,115,115, 
  /* [1][0][][] */ 83,-127,52,13,-10,10,-82,102, 
  /* [2][0][][] */ -25,-16,127,43,50,62,-30,48, 
  /* [3][0][][] */ -54,14,-127,-82,-87,-82,-73,73, 
  /* [4][0][][] */ 73,-54,127,-89,-75,-65,-54,71, 
  /* [5][0][][] */ 92,102,-127,87,72,-28,93,-104, 
  /* [6][0][][] */ -38,-34,-127,-12,-21,-104,-113,-16, 
  /* [7][0][][] */ 113,-62,125,127,-105,122,0,17, 
  /* [8][0][][] */ -127,56,8,-42,-53,43,-114,-89, 
  /* [9][0][][] */ -118,74,-127,117,-82,-69,-107,-91, 
  /* [10][0][][] */ -28,-26,127,67,-77,27,-51,51, 
  /* [11][0][][] */ 127,-76,14,-22,59,102,94,82, 
  /* [12][0][][] */ 127,-16,-27,37,-21,111,-28,-27, 
  /* [13][0][][] */ -105,121,-127,-112,94,-76,90,124, 
  /* [14][0][][] */ -53,-69,40,21,-127,77,26,103, 
  /* [15][0][][] */ 127,-22,68,67,-127,95,-5,-101, 
  /* [16][0][][] */ -65,-127,97,88,-87,-36,-60,107, 
  /* [17][0][][] */ -57,99,6,127,73,113,18,-101, 
  /* [18][0][][] */ 32,86,-3,-106,46,-46,-127,-19, 
  /* [19][0][][] */ 89,109,-43,-3,-127,73,96,-92, 
  /* [20][0][][] */ -5,13,-72,62,-77,127,39,-30, 
  /* [21][0][][] */ -8,-36,40,14,79,-127,-74,-29, 
  /* [22][0][][] */ 108,90,127,106,91,119,-78,39, 
  /* [23][0][][] */ -127,-96,-32,50,13,-85,-110,55, 
  /* [24][0][][] */ -116,60,-53,-127,113,-89,47,35, 
  /* [25][0][][] */ 127,-58,-78,-37,67,85,40,-13, 
  /* [26][0][][] */ 76,59,-51,-57,-46,127,12,-66, 
  /* [27][0][][] */ 90,-28,48,127,-43,98,25,43, 
  /* [28][0][][] */ 40,-56,90,88,15,104,127,0, 
  /* [29][0][][] */ 20,-43,127,-107,-114,112,-32,97, 
  /* [30][0][][] */ 86,102,127,-18,-53,88,20,-36, 
  /* [31][0][][] */ -29,-18,-127,-44,24,-13,14,-29, 
  /* [32][0][][] */ 113,-41,-106,34,-127,119,89,-45, 
  /* [33][0][][] */ -59,-60,-87,-76,127,74,-79,-108, 
  /* [34][0][][] */ -29,50,19,68,-62,76,127,-70, 
  /* [35][0][][] */ 30,127,33,31,83,-40,-41,18, 
  /* [36][0][][] */ -108,-40,123,-124,127,8,-79,88, 
  /* [37][0][][] */ 16,-55,125,127,-75,-61,-41,121, 
  /* [38][0][][] */ 113,-94,-118,117,-118,-127,127,104, 
  /* [39][0][][] */ -65,-108,-81,-127,46,-85,18,31, 
  /* [40][0][][] */ 127,-102,112,115,97,126,94,-126, 
  /* [41][0][][] */ 113,73,107,102,-74,117,-127,-78, 
  /* [42][0][][] */ 127,-50,-11,24,-84,114,-18,-49, 
  /* [43][0][][] */ -64,-127,64,51,-84,96,89,123, 
  /* [44][0][][] */ 113,92,79,44,127,42,-110,-87, 
  /* [45][0][][] */ -91,-100,60,-125,122,-127,-55,111, 
  /* [46][0][][] */ 67,-88,76,-101,-69,10,-17,127, 
  /* [47][0][][] */ -96,-40,-94,127,53,-100,-76,64, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 4.86494968754414e-07, 0.00092753319768235087, 0.0012132006231695414, 0.0011652249377220869, 0.0027790279127657413, 0.00015553607954643667, 0.0027417459059506655, 0.001637400477193296, 0.0002301387139596045, 0.0016680822009220719, 0.00064488122006878257, 0.00060526706511154771, 0.001140994019806385, 0.00063288310775533319, 0.0011253680568188429, 0.0019213887862861156, 0.0018347969744354486, 0.00065444456413388252, 0.0025888136588037014, 0.00061469653155654669, 0.00084943108959123492, 0.0011838825885206461, 0.00094148493371903896, 0.0025883184280246496, 0.00036922615254297853, 0.0022242993582040071, 0.00112638168502599, 0.00049344968283548951, 0.00086303870193660259, 0.0013907442335039377, 0.0010933824814856052, 0.0022228420712053776, 0.0015217588515952229, 0.00040958652971312404, 0.0010340615408495069, 0.0015917482087388635, 0.00093214621301740408, 0.00021382984414231032, 0.00033848633756861091, 0.0029286269564181566, 0.0012553416891023517, 0.00096467498224228621, 0.00061234727036207914, 0.0001029061822919175, 0.00033531885128468275, 0.00061573972925543785, 0.0014438540674746037, 0.0018933503888547421, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 40470064, -7608, 9059, 3893, 4615, 143344, 486, 2402, 45405, 2305, 21592, 14634, -4305, -4676, -6664, -5771, -55, 20951, -379, 8909, -3435, 3296, 22130, 1716, 14884, -673, 8080, 15442, -4765, -10954, 98, -389, -950, 35710, -535, 5349, 10369, 54575, 38143, 4983, 1671, 14322, 10097, 139983, 34919, -12333, -4625, 2306, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 1.3566607037773792e-07, 0.00025865589850582182, 0.00033831832115538418, 0.00032493963954038918, 0.00077497167512774467, 4.3373460357543081e-05, 0.00076457503018900752, 0.00045661252806894481, 6.4177467720583081e-05, 0.00046516855945810676, 0.00017983434372581542, 0.00016878737369552255, 0.00031818248680792749, 0.00017648849461693317, 0.00031382497400045395, 0.00053580669919028878, 0.00051165936747565866, 0.00018250121502205729, 0.00072192767402157187, 0.00017141691932920367, 0.00023687600332777947, 0.00033014258951880038, 0.00026254652766510844, 0.00072178960544988513, 0.00010296398977516219, 0.00062027765670791268, 0.00031410763040184975, 0.0001376055006403476, 0.00024067067715805024, 0.00038782891351729631, 0.00030490534845739603, 0.00061987130902707577, 0.00042436420335434377, 0.00011421905946917832, 0.00028836284764111042, 0.00044388172682374716, 0.00025994228781200945, 5.9629510360537097e-05, 9.4391754828393459e-05, 0.00081668951315805316, 0.00035006998223252594, 0.00026901339879259467, 0.00017076179210562259, 2.8696860681520775e-05, 9.3508453574031591e-05, 0.00017170782666653395, 0.00040263935807161033, 0.00052798783872276545, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ -40,9,87,-126,-10,127,-6,101,-18,-16,-76,93,14,-12,-1,10,-22,-19,-1,45,-26,57,-127,88,20,-18,-23,-22,40,37,27,45,-4,3,15,-10,-4,101,-30,26,-26,-21,26,-65,-127,127,-43,14, -124,37,64,70,11,123,-15,34,57,-127,-55,103,-13,-36,-6,0,-127,-74,-47,9,-127,77,47,65,76,-74,-2,-97,36,56,17,-127,-36,-40,127,-30,-16,2,-27,127,47,-45,-5,-60,-28,36,-127,48, 10,15,42,3,-15,58,-34,28,-8,37,-94,59,5,-23,-79,-15,63,21,10,-87,32,124,-14,58,34,23,-21,32,0,23,25,-48,-29,-16,30,-8,4,127,-64,32,-62,49,25,-111,-60,46,0,24, 
  /* [0][1][][] */ -127,12,92,45,-24,27,-10,38,-26,-36,-44,121,26,-37,29,-42,-18,-75,19,20,-44,99,69,92,57,-127,-17,-127,-15,88,43,-126,-10,-31,-7,-127,-34,108,1,46,38,-121,57,-127,-62,123,-33,-27, 7,-45,-125,-127,-127,-88,-127,-127,-127,67,127,-127,127,127,15,-127,49,127,127,127,19,-127,-86,-127,127,47,127,-26,-127,-127,127,76,-127,127,10,7,127,-118,-127,61,-127,-127,127,97,37,-48,47,127, -44,25,84,27,-9,-72,-3,29,-42,-2,-125,8,21,-74,45,-20,-69,-76,-9,-87,31,85,-36,104,43,-12,11,70,-22,95,46,-18,-10,-20,37,-54,-15,106,-85,12,47,-38,-6,-75,7,25,-15,28, 
  /* [0][2][][] */ 33,4,90,-19,2,62,-40,52,-12,-6,-14,59,7,1,-57,4,-23,14,39,-111,-11,95,-18,84,18,-38,-25,55,-16,48,44,2,-11,-28,-25,15,6,56,-38,23,-23,25,16,-56,-80,119,6,32, -34,127,127,-50,-4,20,44,37,-12,-12,56,47,-3,27,-127,-5,33,-39,43,-111,-30,7,1,35,36,29,24,29,51,43,65,40,31,13,40,7,-13,-8,-22,121,2,-80,-49,45,-11,64,-38,-86, 21,18,8,-19,-8,-29,-58,-24,-24,35,-58,-64,-1,19,-65,-5,-43,44,70,66,49,36,-25,73,39,-13,-13,-13,4,52,21,75,-21,57,-26,31,16,41,-52,-28,-23,-67,-6,-2,-66,109,-10,22, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00018193847790826112, 0.025584390386939049, 0.0035738409496843815, 0.000671941670589149, 0.010061263106763363, 0.00088835397036746144, 0.0064413109794259071, 0.0045525827445089817, 0.0024457755498588085, 0.0012878056149929762, 0.0046271816827356815, 0.0029768808744847775, 0.014171437360346317, 0.00083180028013885021, 0.0093339122831821442, 0.00310942018404603, 0.0022424415219575167, 0.016220821067690849, 0.0022278421092778444, 0.0018195544835180044, 0.006459380965679884, 0.0049833199009299278, 0.0064213359728455544, 0.0014319460606202483, 0.0048167803324759007, 0.0057298797182738781, 3.4769189369399101e-05, 0.010302093811333179, 0.0084907673299312592, 0.0022366985213011503, 0.0033595312852412462, 0.011885685846209526, 0.0082312952727079391, 0.0095479870215058327, 0.0055634435266256332, 0.0041096690110862255, 0.0019247977761551738, 0.0069790482521057129, 0.00077538745244964957, 0.0013446636730805039, 0.0025993757881224155, 0.0001133344994741492, 0.013675148598849773, 0.0082495557144284248, 0.0058927340433001518, 0.0092668067663908005, 0.0075505981221795082, 0.00098053109832108021, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -471593, -2222, -58328, -54082, 24937, -70643, 28620, 25103, 7487, 128240, 42060, 19088, -4935, -30702, 33859, 8831, -23607, 17485, 10552, -21380, 17036, -30181, 48128, 11682, -19544, 36216, -530560, 15888, 5648, -8450, -21142, -451, 27308, 2477, -9746, 52814, -58076, -13485, -36982, 57861, 164446, -528059, -11526, 55404, 74628, -20324, 14973, -69619, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 4.2809056139958557e-06, 0.0006019856664352119, 8.4090374002698809e-05, 1.581039214215707e-05, 0.00023673560644965619, 2.0902447431581095e-05, 0.00015156026347540319, 0.00010711959475884214, 5.7547662436263636e-05, 3.0301309379865415e-05, 0.00010887486860156059, 7.0044254243839532e-05, 0.00033344558323733509, 1.9571771190385334e-05, 0.00021962146274745464, 7.3162831540685147e-05, 5.2763331041205674e-05, 0.00038166638114489615, 5.2419814892346039e-05, 4.2813047912204638e-05, 0.00015198544133454561, 0.00011725458898581564, 0.0001510902657173574, 3.3692849683575332e-05, 0.00011333601287333295, 0.00013482070062309504, 8.1809861285364605e-07, 0.00024240220955107361, 0.00019978276395704597, 5.262820195639506e-05, 7.9047793406061828e-05, 0.0002796631888486445, 0.00019367753702681512, 0.00022465852089226246, 0.00013090456195641309, 9.6698095148894936e-05, 4.5289361878531054e-05, 0.00016421290638390929, 1.8244410966872238e-05, 3.1639145163353533e-05, 6.1161787016317248e-05, 2.6666941721487092e-06, 0.00032176819513551891, 0.00019410719687584788, 0.00013865256914868951, 0.00021804252173751593, 0.00017766113160178065, 2.30713212658884e-05, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ 68,-54,-80,23,-52,-79,-76,-81,23,-50,71,-45,127,68,42,-38,90,86,64,73,88,-39,-99,41,110,46,74,-9,-81,-6,-47,-68,78,112,72,34,73,-81,65,-31,-46,65,90,37,76,-14,-2,27, 
  /* [1][0][][] */ -42,-59,75,-56,-115,62,-64,-74,-63,82,-85,65,91,-69,79,-4,-59,-102,-21,-62,-61,83,-79,-127,-73,-57,-52,-83,71,-15,43,58,-110,-48,-92,74,-39,44,-50,-25,89,-16,110,-73,24,118,103,5, 
  /* [2][0][][] */ 46,44,-38,52,94,-51,-38,-116,57,-57,54,-63,39,-22,-48,-63,50,110,-57,50,52,-62,40,34,69,72,53,94,-49,-6,44,-75,127,70,13,-49,44,-78,54,-61,-52,57,-71,71,50,98,-81,32, 
  /* [3][0][][] */ 76,-114,-80,-17,16,-6,-1,18,10,34,-48,42,94,68,108,-38,68,-61,-31,45,-38,-127,-24,38,-26,-45,11,-79,-19,6,26,100,-42,4,-49,73,61,-4,-54,-25,27,51,72,-71,50,-122,-8,87, 
  /* [4][0][][] */ -56,49,49,37,4,34,34,49,31,48,-58,55,-15,-40,-35,29,5,-87,-17,-46,-127,12,13,-42,-48,-38,-35,12,40,-13,42,18,27,-92,-22,-28,-43,54,-41,43,29,-34,35,-66,-79,-7,23,65, 
  /* [5][0][][] */ 60,88,-71,25,93,49,-11,58,52,-46,77,-77,72,48,-26,-39,-4,78,-77,66,58,-61,-73,72,51,-12,39,-55,-76,-58,12,87,-16,56,-51,-62,58,-51,48,-72,-57,-14,-71,96,99,-127,0,9, 
  /* [6][0][][] */ 44,-88,-55,-67,31,-58,-61,-31,70,-57,90,-76,15,66,-96,-70,-55,44,-10,46,41,-41,-39,36,39,72,43,-60,-47,-2,-90,-50,123,46,3,-52,35,-69,60,-72,-60,65,-110,127,67,34,-76,-20, 
  /* [7][0][][] */ 56,-63,-81,-46,-67,-35,-106,-9,40,-54,53,-72,12,52,-85,-71,37,33,2,40,36,-70,109,57,18,67,60,79,-46,-69,-123,-56,-51,47,35,88,52,-75,49,-78,-59,53,-43,127,55,37,-98,-25, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0054221106693148613, 0.0033568642102181911, 0.010100782848894596, 0.010911615565419197, 0.010187912732362747, 0.0072785657830536366, 0.0058124242350459099, 0.0086608082056045532, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -6576, -1702, 26152, -17746, 4090, 37010, 66870, 52508, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00012757907097693533, 7.8985038271639496e-05, 0.00023766548838466406, 0.00025674389326013625, 0.00023971559130586684, 0.00017126036982517689, 0.00013676293019670993, 0.00020378372573759407, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 58,-101,102,-127,-102,98,126,5, 
  /* [1][0][][] */ 19,66,22,126,57,127,46,105, 
  /* [2][0][][] */ -112,0,-76,-111,82,-127,-25,100, 
  /* [3][0][][] */ 57,66,127,-62,-75,76,75,86, 
  /* [4][0][][] */ 100,-18,127,-45,-80,-10,101,117, 
  /* [5][0][][] */ -75,59,-65,30,117,-127,-116,-18, 
  /* [6][0][][] */ -54,35,9,-56,127,12,-116,-124, 
  /* [7][0][][] */ -113,-96,71,-82,-120,127,-69,70, 
  /* [8][0][][] */ 45,-79,25,-91,41,127,43,2, 
  /* [9][0][][] */ 106,-37,5,-127,-68,-21,28,122, 
  /* [10][0][][] */ -76,127,9,15,47,-103,-106,-77, 
  /* [11][0][][] */ -48,26,-127,13,68,-2,-19,-85, 
  /* [12][0][][] */ -120,87,-28,-80,117,-127,-91,18, 
  /* [13][0][][] */ -41,111,-74,-127,82,-74,-93,-127, 
  /* [14][0][][] */ 31,38,15,127,-13,115,111,-45, 
  /* [15][0][][] */ 11,-34,-51,-118,-127,110,54,110, 
  /* [16][0][][] */ 76,99,-35,2,70,-127,-28,-102, 
  /* [17][0][][] */ 100,127,104,44,-113,75,26,-42, 
  /* [18][0][][] */ 127,-32,93,86,60,-64,68,98, 
  /* [19][0][][] */ 0,-127,-62,39,2,34,38,58, 
  /* [20][0][][] */ 44,-7,83,-36,-127,90,-36,-50, 
  /* [21][0][][] */ 117,-8,97,104,-127,75,83,33, 
  /* [22][0][][] */ -30,-89,-17,-127,112,27,-107,-7, 
  /* [23][0][][] */ -102,57,127,-26,-82,0,-48,83, 
  /* [24][0][][] */ -75,-124,-82,127,-120,56,18,93, 
  /* [25][0][][] */ -62,-59,-72,13,127,51,-84,47, 
  /* [26][0][][] */ -127,11,19,-38,57,-105,45,47, 
  /* [27][0][][] */ -79,110,-6,-127,82,-75,100,72, 
  /* [28][0][][] */ -39,-56,-127,-22,68,58,-79,-1, 
  /* [29][0][][] */ 89,-55,-58,127,24,99,60,-12, 
  /* [30][0][][] */ -113,54,59,-72,127,44,-79,-98, 
  /* [31][0][][] */ 70,36,-111,-11,107,-60,8,-127, 
  /* [32][0][][] */ 8,127,-65,-75,29,-122,-96,-17, 
  /* [33][0][][] */ 89,24,-127,72,-20,-55,-97,15, 
  /* [34][0][][] */ -77,20,43,-127,66,-80,-127,69, 
  /* [35][0][][] */ 48,-29,66,-115,-2,-55,-102,-127, 
  /* [36][0][][] */ 127,1,-50,84,-116,95,-99,-40, 
  /* [37][0][][] */ -46,-49,-117,127,57,-22,47,53, 
  /* [38][0][][] */ -127,-40,-99,-13,-39,-56,-58,-1, 
  /* [39][0][][] */ 20,127,-31,-105,-62,-56,-93,-104, 
  /* [40][0][][] */ 31,22,-38,127,70,70,-27,-93, 
  /* [41][0][][] */ 54,79,45,102,-37,72,-127,-5, 
  /* [42][0][][] */ 29,-127,-14,63,-31,29,46,-23, 
  /* [43][0][][] */ 16,-90,60,61,-127,65,72,85, 
  /* [44][0][][] */ -73,-83,79,-127,98,60,79,56, 
  /* [45][0][][] */ -88,-72,-120,-127,106,120,81,69, 
  /* [46][0][][] */ 26,26,63,11,-109,127,-15,-17, 
  /* [47][0][][] */ 68,-59,94,-57,127,120,10,9, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00082346296403557062, 0.0013833506964147091, 0.00046355626545846462, 0.00078758690506219864, 0.00034663351834751666, 6.9777532189618796e-05, 0.00044314496335573494, 3.6055262171430513e-05, 0.00099949154537171125, 0.0011506631271913648, 2.9192005968070589e-05, 0.00049588258843868971, 0.00062573887407779694, 0.00011105104204034433, 0.00035285897320136428, 0.00016433364362455904, 0.0008649771916680038, 0.00065861479379236698, 0.00092736410442739725, 0.0012430432252585888, 0.0009862768929451704, 0.00011022127000615001, 0.00021872101933695376, 0.00060514942742884159, 0.00066368922125548124, 0.0010117831407114863, 0.0010034424485638738, 0.00046751523041166365, 0.00045714611769653857, 0.001464802073314786, 0.00013119920913595706, 0.00053719652350991964, 0.00016951565339695662, 0.0011846988927572966, 0.0009948614751920104, 0.00090950820595026016, 0.00075661315349861979, 0.0023286766372621059, 0.0013532449956983328, 2.1468566046678461e-05, 0.000389710912713781, 0.0014850307488813996, 0.0018552637193351984, 0.00042234788998030126, 0.0016910196281969547, 3.2085146813187748e-05, 0.00026727872318588197, 0.0016822057077661157, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { -3225, 3017, -3721, -5771, 2078, 190810, 11221, 124926, -2170, -1209, 353091, 7689, -2181, 58575, 22678, 40350, 5236, -1274, -1369, -819, -2142, 82287, 48432, 3225, 9777, -1731, 24941, 16746, 23757, 1188, 81353, 13323, 41717, -468, 5699, 2271, -7290, -795, 1318, 436306, 13830, 1034, -354, 9003, 3267, 270757, -32787, 561, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.0003278757503721863, 0.00055080454330891371, 0.00018457278201822191, 0.00031359106651507318, 0.00013801801833324134, 2.7783107725554146e-05, 0.00017644568288233131, 1.435601370758377e-05, 0.00039796449709683657, 0.00045815602061338723, 1.1623292266449425e-05, 0.00019744405290111899, 0.00024914855021052063, 4.421685662236996e-05, 0.00014049677702132612, 6.5432228439021856e-05, 0.00034440532908774912, 0.00026223863824270666, 0.00036924573942087591, 0.00049493875121697783, 0.00039270287379622459, 4.3886466301046312e-05, 8.7087479187175632e-05, 0.00024095051048789173, 0.00026425911346450448, 0.00040285859722644091, 0.00039953761734068394, 0.00018614911823533475, 0.00018202047795057297, 0.00058323575649410486, 5.2239189244573936e-05, 0.00021389390167314559, 6.7495529947336763e-05, 0.00047170795733109117, 0.00039612097316421568, 0.00036213611019775271, 0.00030125834746286273, 0.00092720211250707507, 0.00053881743224337697, 8.5480733105214313e-06, 0.00015517001156695187, 0.000591290183365345, 0.00073870469350367785, 0.00016816497372929007, 0.00067330815363675356, 1.2775245522789191e-05, 0.00010642155393725261, 0.00066979869734495878, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 110,-123,-127,112,127,-56,77,-3,79,-127,-32,74,7,47,-97,-127,15,127,-69,-13,1,-65,-24,73,92,-27,-127,-50,62,41,-16,-127,44,-3,-6,119,-38,-4,55,-21,-127,-108,13,12,-1,27,-6,13, 47,-118,-65,64,-39,-60,-115,-87,92,-82,-76,52,44,-30,-127,31,17,44,-110,127,127,-38,56,81,29,-64,-55,-40,-14,19,4,-50,-24,-26,-60,66,-14,102,44,81,-52,-30,42,38,-127,127,35,127, 11,-7,-115,50,47,-26,-127,-78,23,5,-32,14,-7,-127,-42,42,-99,55,9,-22,44,1,127,-76,39,-72,12,-1,-76,-4,94,-36,-58,-31,-42,29,24,17,58,0,27,-20,-30,38,77,43,25,1, 
  /* [0][1][][] */ 79,-127,26,127,109,-30,121,-20,32,-24,-39,127,65,-57,-41,-121,30,79,-71,20,60,43,-104,127,127,-72,-38,-127,20,124,-48,-50,-49,-34,-28,127,-117,67,83,95,-71,-127,0,48,-35,-39,127,92, 127,-69,64,12,-80,-67,-68,-127,127,-18,-94,92,127,-62,-13,29,-22,90,-127,12,55,127,61,106,71,-127,1,-72,-123,112,-24,20,-127,-127,-127,95,-127,97,127,127,-80,-98,127,127,-9,30,56,60, -20,10,88,-45,46,-22,22,-96,-10,25,-60,64,37,-125,-3,57,-127,75,-75,-64,48,81,115,12,82,-59,61,21,-127,127,127,27,35,-52,-23,-2,-70,76,46,26,31,16,44,62,-87,75,124,24, 
  /* [0][2][][] */ 100,-21,-8,74,75,-127,119,12,-21,36,-7,90,21,-105,78,-122,-12,34,-55,-57,51,-25,38,27,82,14,45,-84,108,15,-19,46,-18,-14,-2,106,-30,127,45,-81,-19,-50,-6,7,-76,23,122,-43, 75,-26,65,29,-47,-87,50,-63,56,20,-127,94,92,-120,100,-24,-11,77,-49,11,99,-11,116,119,0,21,39,-71,4,71,-43,83,-103,-13,-30,84,-47,125,80,-94,8,-78,69,4,-121,1,123,-10, -32,37,35,10,26,-50,1,29,12,22,-69,81,7,-31,88,13,-73,73,14,-39,-21,-14,77,7,69,8,75,-11,-25,38,46,124,-70,-47,-21,-37,35,115,88,-45,76,2,-2,30,25,24,120,-56, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0024594906717538834, 0.0013352845562621951, 0.0017447337741032243, 0.0051773427985608578, 0.0012562191113829613, 0.0036258699838072062, 0.001514311064966023, 0.0003941019531339407, 0.0053071305155754089, 0.0056038103066384792, 0.0092791756615042686, 0.0034551252610981464, 0.0050603291019797325, 3.5989647585665807e-05, 0.010264291428029537, 0.0029687490314245224, 0.0048719537444412708, 0.003249345812946558, 0.0021795299835503101, 0.0098950313404202461, 0.0046624718233942986, 0.0056531196460127831, 0.0026202790904790163, 0.0027482509613037109, 0.00090239191194996238, 0.0071274940855801105, 0.0032221251167356968, 0.0023149794433265924, 0.0021102239843457937, 0.00084602966671809554, 0.0015048162313178182, 0.0063670957460999489, 0.0014172724913805723, 0.0012695379555225372, 0.0005939128459431231, 0.0022675753571093082, 0.00097787356935441494, 0.0021200303453952074, 0.0047829095274209976, 0.011291259899735451, 0.0058446740731596947, 0.001488014473579824, 0.003452344099059701, 0.0056762685999274254, 0.00069688510848209262, 0.002843070775270462, 0.72236311435699463, 0.0008400973747484386, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 31408, 62515, -39610, -8079, -81734, 133746, -65538, 399640, 22132, 25517, 90343, -24318, -6040, -1260883, 25349, 6209, 24731, -2361, 27273, -5670, 11561, -24937, -51888, 25591, 92608, 12212, -19800, 115731, 54484, 47421, -2734, -21358, -5057, 115544, 296809, -13548, 229841, -87933, 3813, -17747, 43062, 156612, -37082, -20322, -24636, -75281, 258, 105947, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 5.7870369346346706e-05, 3.1418461730936542e-05, 4.1052560845855623e-05, 0.00012181983038317412, 2.9558097594417632e-05, 8.5314590251073241e-05, 3.563084828783758e-05, 9.2729869720642455e-06, 0.00012487366620916873, 0.00013185436546336859, 0.00021833354549016804, 8.1297068390995264e-05, 0.00011906657164217904, 8.4681522594109992e-07, 0.00024151273828465492, 6.9852918386459351e-05, 0.0001146342110587284, 7.6455195085145533e-05, 5.1283059292472899e-05, 0.0002328242699149996, 0.00010970522271236405, 0.00013301458966452628, 6.165362719912082e-05, 6.4664731326047331e-05, 2.1232750441413373e-05, 0.00016770574438851327, 7.5814707088284194e-05, 5.4470106988446787e-05, 4.9652331654215232e-05, 1.9906581655959599e-05, 3.5407440009294078e-05, 0.00014981401909608394, 3.3347587304888293e-05, 2.987148218380753e-05, 1.3974419744045008e-05, 5.3354713600128889e-05, 2.3008789867162704e-05, 4.9883066822076216e-05, 0.00011253904813202098, 0.00026567670283839107, 0.00013752173981629312, 3.5012104490306228e-05, 8.1231628428213298e-05, 0.00013355926785152406, 1.6397296349168755e-05, 6.6895787313114852e-05, 0.016996780410408974, 1.97669978660997e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 8,-52,-64,17,40,93,86,4,58,18,98,17,-127,65,-83,98,-35,-80,89,124,9,-39,-110,-32,77,73,81,61,-67,62,6,-72,93,-62,-53,-91,-62,59,-77,94,-86,-64,15,-45,-77,-26,-69,44, 
  /* [1][0][][] */ -28,6,41,-3,-71,64,34,19,-65,71,33,64,-113,75,-57,41,-73,-13,4,-72,-8,46,-48,-55,82,34,-12,65,-29,56,-44,50,74,-43,69,-104,-28,-48,-38,-13,-127,31,102,-75,-50,1,-20,-66, 
  /* [2][0][][] */ -48,-17,-1,-67,36,54,-55,-24,57,3,42,41,-53,-82,-59,54,-16,5,-80,-83,57,-22,-26,-125,127,-49,-91,80,-49,-11,81,85,-26,-63,-8,-104,25,118,-13,92,-67,-102,-48,97,13,48,73,-51, 
  /* [3][0][][] */ 54,-43,25,85,-17,-45,71,44,-127,-104,-53,122,-5,-60,-24,40,-93,-49,63,-65,51,15,-18,77,-114,-30,-41,-71,-52,-25,10,104,-12,51,86,73,76,-3,8,-99,55,-41,29,-50,-42,75,57,-63, 
  /* [4][0][][] */ 65,-119,-2,76,29,52,58,-53,70,-22,102,-87,-21,74,-39,7,11,87,36,-31,-38,42,9,-56,104,4,71,126,-64,29,68,112,106,-37,-71,-127,-80,81,-55,106,-61,-99,41,6,38,16,-31,-12, 
  /* [5][0][][] */ 1,-107,-48,73,100,36,-53,-16,70,-63,112,-97,50,-74,-60,-33,127,8,44,-118,-53,-30,71,-2,75,-88,23,-82,-58,-86,-62,2,-58,-70,10,-61,36,-34,23,74,63,34,-2,53,-90,-22,47,-67, 
  /* [6][0][][] */ 50,52,-64,-62,-70,89,-48,-11,82,95,71,21,-81,78,66,8,-36,127,2,90,-82,52,48,-92,126,74,87,67,-53,50,76,-80,84,-91,-62,-104,-78,69,-65,103,-71,70,-87,-46,57,-71,-72,74, 
  /* [7][0][][] */ -92,52,-74,-120,-72,69,13,12,37,76,33,71,-21,46,-54,-7,-65,-40,-53,-113,-76,-77,-9,-39,19,35,30,30,-11,45,9,-127,35,-52,-51,-37,-41,34,-45,39,-42,47,-91,-44,58,64,-26,82, 
  /* [8][0][][] */ -9,-100,63,61,62,-92,-67,-29,26,-31,-7,16,30,-68,65,-16,97,92,-22,-90,12,77,-127,22,51,-112,-40,73,57,-6,40,88,-45,47,55,-95,-93,39,-42,-55,6,13,6,19,-19,-73,18,-25, 
  /* [9][0][][] */ 57,33,79,118,41,19,-22,84,127,-10,88,18,-71,-48,55,-19,104,-87,-6,82,98,95,-19,49,3,-42,-12,51,8,21,-38,-58,35,-13,36,11,-14,-27,17,33,-24,73,85,-53,-59,-64,-60,-102, 
  /* [10][0][][] */ -91,25,-7,-115,-90,60,-85,27,52,98,-1,22,-16,29,-60,-30,-96,51,-68,-1,-65,9,31,-75,42,7,18,87,63,87,30,7,-22,-28,-84,-24,-74,-69,105,37,-108,-127,-72,-58,58,-26,83,9, 
  /* [11][0][][] */ -36,-27,51,-5,86,-100,-45,-67,-66,-40,-87,-45,102,-62,21,-54,86,74,-32,-89,-104,-60,107,32,-38,-49,-89,-54,-85,-85,61,-58,-83,68,-127,86,63,-70,58,-64,48,-14,-57,62,-60,-27,-94,88, 
  /* [12][0][][] */ 55,36,13,32,58,-17,42,14,-38,-38,-48,-62,9,-41,77,-19,49,-25,50,-37,-50,-32,-31,43,67,47,-44,-36,-47,-56,40,-21,67,9,17,-32,39,-64,127,40,53,44,8,-44,20,-43,-29,52, 
  /* [13][0][][] */ -40,40,-33,63,38,53,-106,57,-30,25,12,23,-54,-40,2,-54,22,-60,-53,-61,95,48,-98,44,127,-50,-15,109,39,41,-50,-81,-48,42,20,-50,9,-45,76,28,80,70,69,-48,-62,-81,3,-55, 
  /* [14][0][][] */ -90,27,42,-62,30,-54,-61,-15,-25,44,-92,54,47,-68,121,61,58,82,-9,70,41,-84,65,55,-79,-55,-78,-123,67,-92,-46,-98,-106,16,39,46,40,-32,90,-81,104,-38,-70,127,-70,-66,69,-8, 
  /* [15][0][][] */ 23,-70,22,38,15,85,72,51,65,17,55,-22,12,60,-127,46,-48,10,72,65,44,32,0,-25,36,81,72,70,32,-25,69,-73,63,-30,-51,-1,-15,-95,-127,67,-55,25,13,-63,75,60,-81,2, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0054678586311638355, 0.0083309467881917953, 0.0068256240338087082, 0.0088441716507077217, 0.0057984716258943081, 0.0076948842033743858, 0.0058298259973526001, 0.010878151282668114, 0.013220345601439476, 0.0070755281485617161, 0.0067142997868359089, 0.006869681179523468, 0.0066501889377832413, 0.01285874005407095, 0.0069888308644294739, 0.0087198195978999138, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { 54844, 29248, 17615, -5133, 49916, -97, -6375, 24979, 4805, -59140, 16245, 44407, -47307, -83935, -40196, 18624, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00012865550525020808, 0.00019602228712756187, 0.00016060292546171695, 0.00020809816487599164, 0.00013643462443724275, 0.00018105610797647387, 0.00013717237743549049, 0.00025595651823095977, 0.00031106694950722158, 0.00016648301971144974, 0.00015798352251295, 0.00016163956024684012, 0.00015647504187654704, 0.00030255859019234776, 0.00016444308857899159, 0.00020517222583293915, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ -44,113,122,-4,44,-114,108,-5,-38,81,84,-127,33,81,-29,-42, 
  /* [1][0][][] */ -22,127,76,-11,75,18,113,33,76,-111,-38,-107,-92,104,12,104, 
  /* [2][0][][] */ -26,112,-55,-78,116,-53,69,-2,-89,-73,127,-95,45,-39,-102,94, 
  /* [3][0][][] */ 114,92,-95,127,-104,-83,88,82,-71,91,102,91,92,-67,83,86, 
  /* [4][0][][] */ -126,77,126,-111,108,127,-121,-110,-123,-126,108,-99,-111,47,-116,-122, 
  /* [5][0][][] */ 124,-127,104,86,-115,93,118,115,90,110,-126,112,-104,112,124,-106, 
  /* [6][0][][] */ -115,95,95,116,104,112,-112,-108,127,-108,89,113,-93,-105,95,-94, 
  /* [7][0][][] */ 84,-17,127,18,-85,40,-24,91,15,-62,-27,43,-80,83,-52,-39, 
  /* [8][0][][] */ 60,-9,56,-7,88,-89,12,64,52,-82,56,-72,-26,93,47,127, 
  /* [9][0][][] */ 119,-58,-75,-85,83,12,26,-127,-31,-24,-117,-24,32,36,-111,93, 
  /* [10][0][][] */ 28,-59,-16,44,-58,-42,-74,17,30,14,-127,46,-34,8,-50,-55, 
  /* [11][0][][] */ -127,-76,-82,28,-108,53,19,-114,-79,33,64,99,-25,-64,-8,2, 
  /* [12][0][][] */ 118,65,-120,-127,-27,-6,-1,-124,12,119,-45,-80,114,-116,-16,88, 
  /* [13][0][][] */ -22,-81,46,121,-127,-68,-85,9,29,93,-76,87,93,90,50,-100, 
  /* [14][0][][] */ -96,114,98,116,82,0,-77,-73,63,2,-87,-127,-110,43,103,-99, 
  /* [15][0][][] */ -49,126,-45,16,99,-7,-74,-74,45,-49,-7,-65,-38,-127,-22,-58, 
  /* [16][0][][] */ -49,-127,50,57,26,4,-22,-98,65,-2,-58,-1,38,18,-55,-57, 
  /* [17][0][][] */ 13,114,73,-10,-63,-127,111,36,-95,-31,94,-48,-34,-23,-66,114, 
  /* [18][0][][] */ -4,46,-9,-52,-59,-124,-28,115,-105,-82,-78,108,-121,-127,-19,71, 
  /* [19][0][][] */ 90,43,-95,96,-127,-82,124,125,-18,104,-39,112,113,38,4,80, 
  /* [20][0][][] */ -14,-18,-42,57,-16,60,1,-127,78,97,-113,36,61,-6,-9,97, 
  /* [21][0][][] */ 115,107,-100,-73,-45,123,-21,-31,-39,-37,77,-116,-67,127,-119,125, 
  /* [22][0][][] */ -109,41,-32,94,81,-80,86,-97,89,87,-89,-14,84,-125,127,-110, 
  /* [23][0][][] */ -90,-127,65,74,-43,-29,-99,8,-114,57,-104,102,-81,-110,20,-108, 
  /* [24][0][][] */ -93,-73,106,-48,98,-101,-53,-101,123,61,-69,-90,76,43,126,-127, 
  /* [25][0][][] */ -99,-113,-123,95,-127,-91,-93,93,57,20,-106,125,-94,76,-60,-13, 
  /* [26][0][][] */ -74,86,-127,-76,73,88,-88,-90,-110,-82,69,76,114,68,-93,-77, 
  /* [27][0][][] */ 43,31,42,14,127,-14,-33,25,-24,-24,21,-44,-41,32,21,-28, 
  /* [28][0][][] */ 20,-123,-64,-30,-24,-110,-40,-127,-112,-103,120,109,-74,-97,-14,35, 
  /* [29][0][][] */ -127,-67,77,-38,108,90,-81,-119,55,-37,-117,-78,-31,-82,60,-85, 
  /* [30][0][][] */ 81,17,-79,55,-50,127,66,61,-56,72,-72,26,71,-54,-113,79, 
  /* [31][0][][] */ 113,81,-71,87,14,71,37,-67,120,82,-127,77,-85,-64,-83,-59, 
  /* [32][0][][] */ 113,127,93,-107,67,-46,-103,49,96,-38,45,73,-79,84,-117,-25, 
  /* [33][0][][] */ 16,88,-64,80,105,-19,-30,-51,-2,99,-8,-44,-75,-35,-127,44, 
  /* [34][0][][] */ 59,-104,-17,98,91,-22,-105,-102,112,-114,-107,79,-119,91,-85,-127, 
  /* [35][0][][] */ 23,0,74,34,-57,-67,54,35,127,13,-3,-44,29,-7,53,-119, 
  /* [36][0][][] */ 25,96,96,-91,-59,-104,-62,-63,-91,-98,81,-101,-98,127,-82,-68, 
  /* [37][0][][] */ -29,114,127,33,69,-84,79,-54,89,59,33,-76,24,-71,-66,-81, 
  /* [38][0][][] */ 127,91,-75,-77,-97,-99,-48,-64,-88,-70,121,44,-122,-84,-75,118, 
  /* [39][0][][] */ -63,-127,-70,4,-57,23,-50,33,-12,-41,19,47,7,6,62,15, 
  /* [40][0][][] */ -13,123,-68,-63,108,98,-4,-90,-55,118,-88,24,104,-35,-127,99, 
  /* [41][0][][] */ 92,100,-73,85,-81,-114,-58,127,-8,-72,-37,81,-95,-59,-76,86, 
  /* [42][0][][] */ 116,106,74,102,-98,-90,50,127,-62,47,-79,69,109,-26,82,-49, 
  /* [43][0][][] */ -95,97,-112,-19,-117,-113,110,96,26,90,118,-73,98,2,127,-89, 
  /* [44][0][][] */ 69,86,-42,8,-54,-113,67,103,-83,45,-22,38,-127,-68,-68,67, 
  /* [45][0][][] */ -78,-80,-34,-54,-127,-48,-68,-41,-60,-2,38,14,-42,-46,77,-25, 
  /* [46][0][][] */ -33,114,-103,-95,25,95,-42,-45,-86,-71,86,35,-65,107,-125,127, 
  /* [47][0][][] */ 66,-66,75,75,82,73,-10,6,98,-52,-101,70,50,127,67,-110, 
  /* [48][0][][] */ -50,-90,29,42,99,-22,80,86,77,127,79,104,122,70,87,-88, 
  /* [49][0][][] */ 28,-48,127,83,-12,93,124,92,70,84,-40,-103,68,79,-85,42, 
  /* [50][0][][] */ -94,79,-73,-88,0,27,103,-120,-38,73,-24,-127,95,-50,-87,79, 
  /* [51][0][][] */ -85,79,104,-61,67,-127,-105,-57,-41,-116,93,-122,-106,-8,-52,-44, 
  /* [52][0][][] */ -87,100,79,-88,72,-98,-120,-82,-127,-83,80,-100,89,-101,111,-93, 
  /* [53][0][][] */ 108,98,-8,19,-27,-120,-59,-1,-33,-101,107,119,-123,127,115,30, 
  /* [54][0][][] */ 106,49,3,-9,-45,127,85,80,-11,46,103,7,49,78,-101,31, 
  /* [55][0][][] */ -76,60,-59,96,36,99,-103,56,-127,-80,98,76,-75,-111,96,-5, 
  /* [56][0][][] */ -109,34,-84,-43,-83,-78,-96,-127,-39,-38,-60,53,32,-53,40,-34, 
  /* [57][0][][] */ -44,98,-126,-92,86,-56,-33,-66,-101,39,27,-98,98,-127,-95,-78, 
  /* [58][0][][] */ 127,-33,83,-71,-88,88,-69,-81,105,103,89,-88,-68,83,83,-92, 
  /* [59][0][][] */ -12,-85,-64,-57,-75,-60,5,20,-123,-117,126,104,-127,-110,-35,106, 
  /* [60][0][][] */ -127,107,-108,-23,-40,-7,107,-103,-84,69,-71,-109,-17,-98,-107,-109, 
  /* [61][0][][] */ 103,81,-104,-83,-53,107,-84,-100,-37,-36,83,-64,-59,-96,-127,86, 
  /* [62][0][][] */ 26,32,1,-87,74,-10,63,64,-105,-98,-60,-127,-29,-91,-100,79, 
  /* [63][0][][] */ -123,-110,104,-127,-89,97,-104,59,-22,-104,-90,-21,88,62,78,-95, 
  /* [64][0][][] */ -107,-109,-6,-35,-127,-92,3,-115,-100,109,-16,-32,87,-26,39,-68, 
  /* [65][0][][] */ 84,-49,-127,48,45,30,74,-117,42,75,-85,-63,124,-126,-116,80, 
  /* [66][0][][] */ -15,-14,51,39,99,58,108,-19,65,52,29,-127,20,71,-3,-20, 
  /* [67][0][][] */ 121,4,53,4,96,105,40,127,-99,-79,26,24,86,94,-116,120, 
  /* [68][0][][] */ 53,-10,-18,-89,-125,-127,-65,109,-107,-112,89,-47,-21,14,110,64, 
  /* [69][0][][] */ -91,-71,-54,127,59,-78,84,50,47,118,-98,-75,90,-112,123,64, 
  /* [70][0][][] */ -65,-67,-63,-36,52,-31,-67,-66,-53,-59,34,76,-57,-127,-52,-73, 
  /* [71][0][][] */ -43,105,-78,49,-85,-3,104,107,-89,90,90,-124,-127,-54,-64,4, 
  /* [72][0][][] */ 97,99,-119,-80,116,-103,-79,45,-43,-75,16,-48,-1,122,-3,127, 
  /* [73][0][][] */ -3,-117,63,55,10,-69,-35,7,29,-10,-127,15,-85,-119,68,-104, 
  /* [74][0][][] */ 40,-127,-4,114,-104,-62,25,53,-35,53,-87,31,34,5,93,-122, 
  /* [75][0][][] */ -116,-38,123,-115,-112,-106,-126,-116,-83,-127,53,-75,102,76,125,-121, 
  /* [76][0][][] */ 36,82,58,27,116,91,84,95,79,8,95,-122,63,88,-127,23, 
  /* [77][0][][] */ 52,-127,-78,-77,-37,-65,-50,-74,-91,-68,-59,-64,-1,-89,50,65, 
  /* [78][0][][] */ -56,75,79,30,13,-69,17,23,127,-11,-24,-10,-36,55,35,-105, 
  /* [79][0][][] */ 100,24,-90,-127,12,83,55,47,-40,-35,-20,-54,74,79,-42,99, 
  /* [80][0][][] */ 59,13,112,78,34,-78,98,127,6,69,57,-19,37,96,47,-55, 
  /* [81][0][][] */ 106,-80,90,93,91,-74,86,-76,89,89,-127,71,-87,104,-93,-95, 
  /* [82][0][][] */ 38,127,-113,-72,-81,51,-63,43,30,-67,-55,56,-84,125,-72,103, 
  /* [83][0][][] */ 53,-21,6,96,-127,-97,-8,64,-75,106,-119,95,-16,-84,37,44, 
  /* [84][0][][] */ -74,-127,75,-71,31,95,-56,6,-72,-101,73,-67,91,-14,73,-83, 
  /* [85][0][][] */ 63,-57,104,31,31,47,82,104,72,47,-57,41,-127,62,-38,-114, 
  /* [86][0][][] */ -29,-73,-2,86,83,51,79,-8,74,80,-127,99,99,47,4,59, 
  /* [87][0][][] */ -44,-127,-24,-19,-3,26,-12,15,-31,-30,13,68,20,16,41,4, 
  /* [88][0][][] */ -84,-95,73,-61,95,-79,-82,-127,78,-81,54,-115,41,92,108,-92, 
  /* [89][0][][] */ -26,100,92,-49,95,127,-92,-109,7,86,95,-87,98,105,89,-82, 
  /* [90][0][][] */ -4,-100,23,-108,113,-32,-19,63,85,-28,116,12,79,52,-4,127, 
  /* [91][0][][] */ -109,-110,-29,-31,-75,-8,7,-35,-1,-90,111,52,-4,-127,-19,25, 
  /* [92][0][][] */ 127,42,-13,2,17,57,63,46,-82,125,18,-109,61,-24,21,69, 
  /* [93][0][][] */ -127,70,-41,-59,-78,-66,-58,-47,-63,-80,81,-74,33,-51,-31,57, 
  /* [94][0][][] */ 66,23,1,-94,127,21,1,55,-41,23,-93,-65,107,100,-65,23, 
  /* [95][0][][] */ 40,127,-51,11,79,-10,105,44,16,-41,103,-101,39,5,-20,58, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00059591152239590883, 5.4715592341381125e-06, 7.1865782956592739e-05, 0.0020068881567567587, 0.00075213209493085742, 0.0014193222159519792, 0.00086715206271037459, 0.0018259943462908268, 0.0010649331379681826, 0.00071799353463575244, 0.0015827309107407928, 0.00090383249334990978, 0.00024026501341722906, 0.00057742529315873981, 0.0019828407093882561, 0.001829754444770515, 0.0022560486104339361, 0.00035233088419772685, 0.0015303376130759716, 0.00043614880996756256, 0.00026442838134244084, 6.857687549199909e-05, 0.00078159209806472063, 2.214953929069452e-05, 0.0003062364412471652, 0.00082131527597084641, 0.0015273812459781766, 0.00061236484907567501, 0.00011380851356079802, 0.00075219513382762671, 0.0016252757050096989, 0.00069281156174838543, 0.0002955923555418849, 0.0001720859290799126, 0.00081604666775092483, 0.0024374839849770069, 0.00040505686774849892, 0.0010755192488431931, 0.00031762709841132164, 0.0024478596169501543, 0.0013636477524414659, 0.00044898298801854253, 0.00096800149185582995, 0.00062248820904642344, 0.00077642034739255905, 0.00095678487559780478, 0.00045904135913588107, 0.00064385769655928016, 0.00013469795521814376, 0.00063646247144788504, 0.0019087104592472315, 0.0019506457028910518, 0.00013534539903048426, 0.0013471997808665037, 0.00062636693473905325, 0.0006396113894879818, 0.00084032781887799501, 0.0019938801415264606, 0.0011865402339026332, 0.0006620073108933866, 0.0010736914118751884, 0.0011078693205490708, 0.00030643719946965575, 0.00091824610717594624, 0.00086420547449961305, 0.00036289391573518515, 0.00091701740166172385, 0.00090394815197214484, 0.00076164776692166924, 2.8275291697354987e-05, 0.00066258694278076291, 0.00081482843961566687, 0.0011591222137212753, 0.0014017480425536633, 0.00067948305513709784, 0.0003486261994112283, 0.00031134652090258896, 3.3465566957602277e-05, 0.0014647081261500716, 0.00018755359633360058, 0.00099928490817546844, 0.0012700774241238832, 0.0013657897943630815, 0.0017504688585177064, 0.0013133046450093389, 0.0016551146982237697, 0.0014561120187863708, 0.0020197387784719467, 0.0015740034868940711, 0.0017256388673558831, 0.00086747121531516314, 0.0010320899309590459, 0.00086741684935986996, 0.00084061350207775831, 0.00082858902169391513, 0.0005930799525231123, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 30416, 1452314, 249883, 1768, 8627, 698, 15415, 5472, -3578, -6133, 1574, -14616, 64629, 29975, 1375, -5558, -2689, 48554, -157, -17673, 33447, 211699, 4037, 573043, 45163, 6835, -92, -29299, -181477, -4497, 3267, 11305, 55932, 125306, 4166, 1613, 52031, 6508, -31182, -2588, 2593, 37133, 4378, 13097, 6708, 5218, 43299, 25137, 89696, -2223, -1174, -2319, 118441, 1897, -17350, 29453, -4952, 6859, -944, 7225, 4943, -1976, 25499, 7548, 7464, 28375, 21277, -8467, 6425, 596083, 23071, -10937, 2815, 833, 9893, 37302, 38286, 691445, 5419, -79195, 4200, -2362, -59, -4147, 2659, -712, -617, -1065, -5416, 1794, -485, 7386, -13440, 21155, -16851, 27210, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00013556089834310114, 1.2446973869373323e-06, 1.6348383724107407e-05, 0.00045653682900592685, 0.0001710987271508202, 0.00032287443173117936, 0.00019726403115782887, 0.0004153862246312201, 0.00024225625384133309, 0.00016333271923940629, 0.00036004744470119476, 0.00020560828852467239, 5.4656673455610871e-05, 0.00013135555491317064, 0.00045106641482561827, 0.00041624158620834351, 0.00051321706268936396, 8.0149970017373562e-05, 0.00034812875674106181, 9.9217286333441734e-05, 6.0153473896207288e-05, 1.5600206097587943e-05, 0.00017780043708626181, 5.03868659507134e-06, 6.9664180045947433e-05, 0.0001868368563009426, 0.0003474562254268676, 0.00013930378190707415, 2.5889723474392667e-05, 0.00017111306078732014, 0.00036972574889659882, 0.00015760419773869216, 6.7242806835565716e-05, 3.9146958442870528e-05, 0.00018563833145890385, 0.00055449089268222451, 9.214433521265164e-05, 0.00024466443574056029, 7.2255381383001804e-05, 0.00055685121333226562, 0.00031020931783132255, 0.00010213686618953943, 0.00022020576579961926, 0.00014160669525153935, 0.00017662394384387881, 0.00021765414567198604, 0.00010442499478813261, 0.00014646793715655804, 3.0641756893601269e-05, 0.00014478563389275223, 0.00043420289875939488, 0.0004437425232026726, 3.0789040465606377e-05, 0.00030646767118014395, 0.00014248905063141137, 0.00014550196647178382, 0.00019116191833745688, 0.00045357769704423845, 0.00026992004131898284, 0.00015059669385664165, 0.00024424862931482494, 0.00025202360120601952, 6.9709851231891662e-05, 0.00020888715516775846, 0.00019659372628666461, 8.2552898675203323e-05, 0.00020860765653196722, 0.00020563459838740528, 0.00017326339730061591, 6.4322030084440485e-06, 0.00015072854876052588, 0.00018536120478529483, 0.00026368285762146115, 0.00031887658406049013, 0.00015457216068170965, 7.9307210398837924e-05, 7.082664524205029e-05, 7.612912668264471e-06, 0.00033319904468953609, 4.2665618821047246e-05, 0.00022732226352673024, 0.00028892347472719848, 0.00031069660326465964, 0.00039820530219003558, 0.00029875701875425875, 0.00037651366437785327, 0.00033124355832114816, 0.00045946016325615346, 0.00035806209780275822, 0.00039255685987882316, 0.00019733664521481842, 0.00023478492221329361, 0.00019732427608687431, 0.00019122690719086677, 0.00018849152547772974, 0.00013491675781551749, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -27,-37,-9,84,-34,27,-28,52,84,18,127,37,-25,-42,7,100,9,57,39,61,-2,-30,-33,-78,0,-18,-101,-4,-51,-51,-13,-4,80,-51,-46,-25,-86,49,44,-79,101,-4,49,16,-61,84,23,12,46,-8,42,-26,121,-34,-1,68,30,74,-32,-20,-50,30,62,-53,-67,-53,78,70,83,16,-16,-95,-122,-127,107,-1,74,-38,65,-31,43,-33,127,70,-62,3,107,1,-76,-42,-11,83,51,-22,-19,-5, -24,74,-65,45,17,54,25,81,119,-10,-53,-16,-10,11,16,72,73,-127,-44,15,127,-115,82,-41,-39,-1,10,31,-84,-17,52,33,127,-54,-15,8,-127,127,80,58,-15,46,10,28,80,32,52,-98,127,29,1,-26,99,17,23,122,24,11,20,41,-127,47,-31,-25,4,-44,20,35,69,-42,66,-6,127,-78,38,-16,43,29,-100,66,6,-68,-95,61,-3,-17,46,-83,-31,4,-19,32,-44,-69,8,-71, -30,79,-123,-23,-50,-34,65,-76,-84,-58,-5,127,-47,32,24,74,127,-120,-126,116,16,-35,-2,-107,13,-82,-60,30,9,-59,-25,-26,-43,-127,-33,-1,-74,45,58,-127,17,70,7,-53,115,47,29,-31,34,20,-6,-39,75,-36,10,62,54,11,-58,74,-44,69,27,-22,-89,-12,19,36,-22,16,-11,-22,107,-25,0,-13,69,36,19,77,-108,-87,-85,68,39,70,47,-87,-37,19,29,28,98,-40,-10,-127, 
  /* [0][1][][] */ -35,93,4,78,-123,-59,-34,73,71,19,11,26,61,-56,62,54,72,26,61,102,-36,-127,-45,32,-39,-73,67,75,-35,16,60,-23,-15,-74,-3,-11,85,-22,5,-13,12,127,43,-51,-84,32,-2,-40,-118,57,20,-20,106,-8,-9,40,33,33,118,127,-18,78,89,-127,-39,-127,127,-37,21,127,-67,-41,77,-34,39,-13,-80,-127,77,-18,117,-127,-49,127,-127,-52,5,85,-8,-63,-80,21,118,127,4,-16, 127,127,127,127,-127,106,127,-83,95,-127,0,-103,127,127,127,63,-16,-87,-19,-127,69,-9,-127,127,127,127,84,127,127,127,127,127,-10,-77,51,127,-118,-90,127,113,-127,-91,127,-71,54,-64,-127,121,20,127,127,-127,-127,-127,127,-127,127,127,-12,69,54,90,-127,35,127,116,32,-11,127,-114,-127,127,112,75,-35,-127,-127,88,-125,127,8,-45,-25,-62,17,-127,-7,-31,60,-118,-48,-127,78,-66,-127,96, -31,99,-117,25,103,-124,-10,-109,-127,-66,-44,-72,65,21,3,20,-101,-72,-99,87,-35,29,-71,-74,-55,-94,-50,-30,90,-26,-25,3,91,-69,-127,-16,58,60,-27,-19,53,62,0,-48,53,-83,-1,-112,-52,-20,77,15,20,-31,2,27,97,2,-127,-34,-39,-127,30,-8,-78,-42,-55,-33,58,-23,-41,59,95,46,-35,-13,-55,18,-8,-15,-39,-91,75,87,60,4,127,-69,-59,18,127,-25,42,58,16,-23, 
  /* [0][2][][] */ -32,-93,-6,-5,-42,-76,9,-45,-8,-37,64,91,18,-52,8,-9,75,71,127,49,-12,9,-5,33,-18,-79,-74,-19,-68,-72,-42,-95,-59,-28,-28,-64,88,9,3,-108,103,54,5,-105,-127,20,-8,1,49,13,3,-41,17,-18,-10,83,-17,-31,26,83,-37,-90,79,-44,-78,-68,45,83,7,-70,-71,-25,5,-34,47,-3,-62,-124,127,37,-8,-107,-75,115,-55,37,8,127,-55,48,-29,21,20,67,20,-25, -28,58,-98,51,-126,-127,10,-127,-23,-59,29,16,-68,4,-74,-127,5,24,-18,30,39,32,-122,-42,-73,-33,-127,17,-26,-19,-118,27,-123,47,-15,-55,-44,33,56,-17,97,26,-29,-127,-102,-115,-39,-127,113,27,-30,-10,-13,38,6,124,-13,-23,-29,2,-29,84,60,-37,-40,-119,-105,127,41,-109,-51,67,29,-12,-48,-49,-122,-18,9,-19,127,17,-47,51,-47,50,-67,73,-62,127,-99,-36,127,9,57,98, -89,-9,-98,48,-50,13,-84,-83,-71,-61,-17,24,-56,7,-56,-112,-25,-61,-26,99,-69,-36,-91,26,-30,-35,-66,2,25,-50,-34,30,-52,21,-48,-63,10,30,69,-88,72,-26,22,19,17,-127,-3,-54,50,-10,36,-20,-14,-39,-3,35,14,28,-4,27,-26,-126,89,-13,-34,-87,-110,116,76,-68,4,-4,40,46,-127,-41,-73,-30,33,48,-22,-28,68,-23,4,54,42,-89,-127,42,8,55,62,8,34,-66, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0073013687506318092, 0.0034238279331475496, 0.0061989659443497658, 0.00036908767651766539, 0.00094815035117790103, 0.0011039259843528271, 0.0025748084299266338, 0.001912249717861414, 0.0043726586736738682, 0.0073325261473655701, 0.01192448940128088, 0.026738004758954048, 0.0027875532396137714, 0.0066800331696867943, 0.0062320856377482414, 0.0069043030962347984, 0.0060475482605397701, 0.0039044378791004419, 0.01089398842304945, 0.79241514205932617, 0.016661988571286201, 0.0063918838277459145, 0.00049307796871289611, 0.018815465271472931, 0.0049286801367998123, 0.0067756329663097858, 0.0011930285254493356, 1.6733394861221313, 2.5275590419769287, 0.0023907148279249668, 0.0035500633530318737, 0.00090602156706154346, 0.012472468428313732, 0.0066503607667982578, 0.00047693972010165453, 0.0048368507996201515, 0.004092012532055378, 0.0028743743896484375, 2.2491757869720459, 0.0089741796255111694, 0.0071671078912913799, 0.00070498377317562699, 0.0048500113189220428, 0.0017624207539483905, 0.0062410766258835793, 0.0064300140365958214, 0.0036444896832108498, 0.0028541716746985912, 0.00035474606556817889, 0.0036567812785506248, 0.0037795503158122301, 0.00059789250371977687, 0.00085280259372666478, 0.0057456707581877708, 0.03475690633058548, 0.0038949055597186089, 0.011513767763972282, 0.0062280213460326195, 0.0024782298132777214, 0.00056508427951484919, 0.0021472699008882046, 0.001024967641569674, 0.0035783357452601194, 0.00026734970742836595, 0.00846136175096035, 0.0055316397920250893, 0.0063236625865101814, 0.0022460611071437597, 0.0016358180437237024, 0.0086110569536685944, 0.0049011358059942722, 0.00067301868693903089, 0.00063883047550916672, 0.0080538177862763405, 0.0093195876106619835, 0.0071677155792713165, 0.00723691051825881, 0.0042315535247325897, 0.01069185882806778, 2.4529263973236084, 0.0059077567420899868, 0.0014855845365673304, 0.0029508580919355154, 0.0024967689532786608, 0.00029171700589358807, 0.0042873071506619453, 0.0069974628277122974, 0.010036809369921684, 0.00040776183595880866, 0.00051310542039573193, 0.0013611415633931756, 0.0096109798178076744, 0.0062419748865067959, 0.0036965652834624052, 0.022754352539777756, 0.0069654397666454315, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 44783, -51203, 52586, 242359, -26543, -45935, -56957, -2197, -4189, 8223, -1902, -1207, -34354, -48984, 20760, 11666, 8678, 28516, -85, 41, -9864, 31563, -74793, 11313, 33950, 18514, -45743, -40, -11, -25065, 7991, -5342, 3852, 68553, -270957, 44468, 28718, -20848, 29, 21234, 6409, -159648, -33902, 29144, -5453, 7013, -256, 86624, 165019, -17739, -9709, 126473, -19827, 1171, -3010, -61525, -10042, -13961, -28039, -81120, -24097, -90699, -59151, -206655, 21490, 10414, -4344, 51295, -93988, 36692, 16618, -32551, 335065, 28637, -1367, 29027, 38888, 34438, 1256, -26, -12468, -79708, -19609, -10040, -41390, 19630, -5348, 2159, -115361, -128525, -64743, -355, -5474, -40042, 5223, 34360, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00017179691349156201, 8.0560661444906145e-05, 0.0001458580227335915, 8.6844156612642109e-06, 2.2309421183308586e-05, 2.5974730306188576e-05, 6.0583730373764411e-05, 4.4994110794505104e-05, 0.00010288608609698713, 0.0001725300244288519, 0.00028057623421773314, 0.00062912952853366733, 6.5589490986894816e-05, 0.00015717725909780711, 0.000146637306897901, 0.00016245419101323932, 0.00014229526277631521, 9.1869129391852766e-05, 0.00025632913457229733, 0.018645063042640686, 0.00039204678614623845, 0.00015039727441035211, 1.1601834557950497e-05, 0.00044271684600971639, 0.00011596894910326228, 0.0001594266650499776, 2.8071259293938056e-05, 0.039372693747282028, 0.059471979737281799, 5.6252116337418556e-05, 8.3530903793871403e-05, 2.1318155631888658e-05, 0.00029346984229050577, 0.0001564790727570653, 1.1222111425013281e-05, 0.00011380825890228152, 9.6282652521040291e-05, 6.7632339778356254e-05, 0.052921783179044724, 0.00021115716663189232, 0.00016863783821463585, 1.6587853679084219e-05, 0.00011411791638238356, 4.1468723793514073e-05, 0.000146848862641491, 0.00015129444363992661, 8.5752697486896068e-05, 6.7156979639548808e-05, 8.3469667515601031e-06, 8.6041916802059859e-05, 8.893059566617012e-05, 1.4068059499550145e-05, 2.0065943317604251e-05, 0.00013519225467462093, 0.00081780960317701101, 9.1644840722437948e-05, 0.00027091219089925289, 0.0001465416862629354, 5.8311292377766222e-05, 1.3296101315063424e-05, 5.052399865235202e-05, 2.4116885469993576e-05, 8.4196137322578579e-05, 6.2905814957048278e-06, 0.00019909086404368281, 0.00013015622971579432, 0.00014879206719342619, 5.2848496125079691e-05, 3.8489837606903166e-05, 0.00020261311146896333, 0.00011532084317877889, 1.5835734302527271e-05, 1.5031305338197853e-05, 0.00018950160301756114, 0.00021928442583885044, 0.00016865212819539011, 0.0001702802546788007, 9.9565964774228632e-05, 0.00025157316122204065, 0.057715915143489838, 0.00013900604972150177, 3.4954930015373975e-05, 6.943195330677554e-05, 5.8747504226630554e-05, 6.8639296841865871e-06, 0.0001008778199320659, 0.00016464618965983391, 0.00023616022372152656, 9.5943960332078859e-06, 1.20730692287907e-05, 3.2026862754719332e-05, 0.00022614070621784776, 0.00014687000657431781, 8.6978005128912628e-05, 0.00053539656801149249, 0.0001638927060412243, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 64,80,56,40,48,-61,48,40,69,78,-21,-38,55,55,63,63,77,71,64,-67,-64,34,60,102,37,27,45,-56,-50,66,-44,58,105,68,-37,25,22,-54,66,12,-56,-53,-49,-71,66,49,60,48,-53,-6,61,-53,-6,51,67,-78,64,-49,45,-45,44,-32,74,59,-40,51,69,32,74,77,-39,-58,-53,-10,-54,46,52,23,40,-16,-72,50,55,-71,58,-76,-6,109,-54,57,54,-51,53,-48,-127,61, 
  /* [1][0][][] */ 59,52,6,-33,-6,-9,54,-57,30,-35,95,94,-29,-54,-18,26,65,5,127,-40,62,4,-22,-28,20,-76,16,-27,70,32,32,-11,-49,7,51,48,-18,-8,31,-89,121,31,-27,-4,50,75,8,-8,31,48,-40,-43,12,-18,53,20,58,-42,-5,-37,-47,2,-52,12,-42,6,59,60,-24,32,-20,-45,29,-6,71,-6,58,-30,-47,-17,21,-47,-45,37,34,-32,21,111,38,-46,49,48,-20,-4,59,34, 
  /* [2][0][][] */ -39,-95,-27,3,-78,77,-51,-45,94,35,90,71,-9,48,-87,95,-91,4,61,53,-83,-6,-24,-6,-56,-127,35,-53,-54,-67,102,-87,82,-58,44,4,56,91,-18,-70,76,69,50,9,-84,41,102,-25,87,-14,49,-41,71,-71,-55,101,-51,65,-55,-58,3,69,94,-2,1,-84,-29,-10,79,11,40,-81,27,-87,73,-89,-102,-77,-21,47,-54,41,16,69,43,71,26,102,83,-45,55,60,4,49,102,-52, 
  /* [3][0][][] */ -55,-39,-58,-43,-82,92,-62,-72,-73,-78,46,96,99,-105,-54,-104,-41,-119,-102,51,10,-79,-72,-98,-50,-31,-74,77,4,-12,79,67,-92,23,100,-57,86,73,-99,-36,-48,61,1,73,-66,-66,-73,-50,43,-35,-94,38,51,-66,-55,66,-64,91,-100,118,50,-29,-74,104,62,-73,-44,-54,33,-76,56,62,87,11,94,-74,-86,-89,104,60,18,-74,-84,83,-16,112,-98,27,76,74,-74,85,-64,70,127,-53, 
  /* [4][0][][] */ 75,-39,57,47,71,47,65,65,60,66,-45,-61,69,100,74,97,65,92,126,-69,64,73,91,85,57,66,58,-63,76,89,-55,22,93,71,-60,52,127,60,77,-4,117,-62,-80,-43,71,71,71,53,-53,91,25,-63,-50,62,53,-62,73,54,72,-81,79,-51,64,28,83,54,60,46,8,78,123,-61,-83,27,-51,66,74,78,-69,-3,-55,62,106,-56,47,-87,-8,-10,-54,61,77,-66,46,-47,-62,30, 
  /* [5][0][][] */ 9,-15,15,-83,75,42,69,68,80,-3,-90,-58,-87,94,-21,104,-51,37,-33,-75,-10,78,70,-25,46,91,67,-46,48,56,-37,8,81,-58,-54,70,-62,-66,93,57,84,61,-88,-72,34,45,57,24,16,-61,-23,-59,-90,40,14,-11,-1,-35,71,-15,76,-13,-9,-11,100,33,-22,-19,62,16,127,87,-79,119,-71,-56,1,80,-77,-3,-65,36,-25,-83,49,-55,85,8,-58,33,97,-88,-69,-78,82,-22, 
  /* [6][0][][] */ 79,91,92,-41,93,90,79,93,87,72,-94,-70,92,89,91,62,79,62,92,77,103,94,87,110,117,90,90,-91,11,-60,-87,-86,94,-127,-53,83,-110,-92,111,-78,-98,-95,-122,-106,93,81,95,57,-80,52,-77,-89,-92,87,75,-105,66,-106,91,-99,-82,-71,95,-118,-75,104,73,83,-75,61,109,-90,-84,6,-63,104,77,109,-109,-123,-121,88,-71,-103,91,-110,105,56,-85,-108,99,-114,77,-104,71,85, 
  /* [7][0][][] */ 63,69,70,61,58,60,54,53,71,67,-65,-107,48,42,46,60,60,53,54,-87,-119,52,55,69,34,45,60,-67,67,-53,-62,-36,64,-127,-85,53,-72,-63,52,-65,-64,-66,-49,-53,78,68,59,73,-62,60,-77,-71,-62,59,63,-58,79,-6,51,-51,-61,-87,50,-44,-76,64,67,51,-23,76,-80,-58,-62,-72,-102,71,73,47,-25,-109,-109,53,-56,-54,61,-37,57,67,-69,-46,56,-45,51,-69,49,60, 
  /* [8][0][][] */ -39,-58,-61,-16,85,47,55,57,44,33,38,-47,27,-22,101,96,-48,-24,-3,-2,62,92,-65,-38,70,74,58,57,33,10,70,32,-21,62,57,-28,63,14,96,60,65,47,11,-20,-51,-90,-50,-56,58,0,61,-21,6,-5,-53,-2,-56,-16,0,-7,29,-4,38,-29,80,16,-53,46,-25,-57,74,-6,-62,79,-45,55,-63,87,0,-34,-66,74,70,8,-90,63,-27,-43,-50,-47,56,-127,48,86,-51,-29, 
  /* [9][0][][] */ 52,58,54,87,32,52,56,51,52,51,-65,-103,69,54,59,56,70,59,31,-60,38,48,58,64,47,58,57,-52,97,67,-57,64,9,-68,-55,127,-45,-73,44,-56,-50,-65,10,19,57,54,52,70,-63,87,-4,-36,-59,56,71,-61,43,-59,66,50,-72,-68,61,76,-76,37,76,-53,-90,56,-72,-54,-56,-73,24,72,48,38,-4,96,83,62,-61,-55,60,-64,45,57,-51,59,-80,-61,77,-59,78,70, 
  /* [10][0][][] */ 59,-39,27,69,79,6,74,64,45,20,-16,-60,38,65,11,76,53,56,50,-45,-69,61,50,68,62,91,48,-40,91,64,-32,-21,127,-72,-9,65,7,-44,-31,58,48,-42,65,-50,11,64,34,45,-15,87,40,-38,-68,65,22,-13,109,-42,-65,-70,-16,89,69,-72,-38,66,62,-72,42,77,73,-43,12,-37,-25,44,44,65,-62,97,-68,53,60,26,39,-59,67,55,-53,86,73,-86,48,-46,-18,18, 
  /* [11][0][][] */ -49,-83,-95,-42,-12,-38,-47,-40,-4,-80,-127,-67,-45,-14,-14,95,-90,-63,-64,-34,-12,-6,-59,-46,1,38,-45,82,74,62,59,-59,-41,30,-26,-20,70,21,44,84,57,42,-3,11,-55,-81,-66,-72,47,-43,28,-11,6,-42,-82,-14,-90,3,-35,1,-70,30,-15,-26,72,-11,-79,-42,-39,-41,-24,71,-67,48,-5,-45,-78,7,-67,-24,34,-46,81,5,-68,67,-25,-93,46,20,-37,-12,-58,61,17,-46, 
  /* [12][0][][] */ -60,-5,-19,-48,7,-46,-17,-18,7,48,20,-27,17,20,7,-48,-69,-52,-95,43,-17,-24,52,51,-37,87,3,35,-44,-23,31,3,45,-14,1,-36,-4,11,75,127,-56,58,-53,-3,42,-94,2,-40,44,-29,47,10,26,31,-50,-47,-29,17,38,23,59,10,48,-7,67,-30,-61,6,30,53,58,51,-44,69,-77,-33,-14,14,0,-70,-32,-46,-31,-59,-20,-59,10,4,33,-54,-36,-55,-57,-67,39,-55, 
  /* [13][0][][] */ -56,7,-68,-42,-27,-43,-35,-29,-24,0,33,-30,-40,-17,-33,1,-27,-28,22,-12,-35,-29,-31,-55,11,-24,-40,42,40,7,48,8,17,-54,43,-38,-26,52,-14,25,-127,40,-47,31,-30,-27,-31,-66,53,42,-62,-37,32,-31,-59,50,49,-39,-29,7,52,46,-45,-46,46,-41,22,26,-39,-9,31,32,28,68,-9,-33,64,-25,-37,-1,-62,-43,-25,35,-45,56,-21,-25,34,-31,-24,20,-62,-38,-56,-50, 
  /* [14][0][][] */ -71,-70,-68,50,-40,-62,-60,-48,-34,-58,-7,-45,-45,-52,-76,-50,-51,-57,-45,5,-60,-52,-51,-105,-66,-40,-41,50,-43,-69,52,-79,-60,-93,56,-68,-64,30,-53,127,24,51,34,-54,-68,-59,-46,-57,22,-33,13,-8,41,-49,-46,59,-63,61,-46,36,-29,58,-40,-42,102,-62,-95,-54,41,43,7,43,-29,-67,-91,-1,-65,-49,80,-93,-5,-51,56,35,-39,56,-40,-105,49,-60,-50,41,-47,44,-92,-54, 
  /* [15][0][][] */ 53,29,97,-2,-43,-76,-74,72,-9,97,56,95,-50,-65,0,20,-65,31,83,-20,-103,-38,72,112,-12,-111,-70,-80,73,11,-78,12,127,-22,-70,47,-8,24,-51,-121,-56,-43,73,-44,43,96,76,81,25,-42,-11,61,0,33,89,-4,90,-16,-68,46,-9,-54,-34,-33,-84,-12,79,30,-3,42,-42,-52,-13,-2,66,39,78,-83,-92,-83,52,53,-57,80,53,-81,-116,45,50,-56,-72,-29,-22,-14,-52,-57, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0038622620049864054, 0.0074606002308428288, 0.003072699997574091, 0.0019616200588643551, 0.00085756037151440978, 0.0033069518394768238, 0.0005222638719715178, 0.0019021341577172279, 0.0031718015670776367, 0.0012186402454972267, 0.00046534754801541567, 0.0041551161557435989, 0.0075414297170937061, 0.0066187824122607708, 0.0057751950807869434, 0.003954458050429821, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -46757, -75780, 4388, 31553, -87256, -1275, -53362, -23771, -16053, -55366, -53712, 71056, 47820, 43072, 108975, -499, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 9.0876754256896675e-05, 0.00017554353689774871, 7.2298826125916094e-05, 4.6155768359312788e-05, 2.0177891201456077e-05, 7.7810633229091763e-05, 1.2288562174944673e-05, 4.4756099669029936e-05, 7.4630625022109598e-05, 2.8673888664343394e-05, 1.094935396395158e-05, 9.7767442639451474e-05, 0.00017744541401043534, 0.00015573606651742011, 0.00013588694855570793, 9.3046073743607849e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -30,-93,39,110,98,84,118,79,-97,60,-102,-67,127,-96,-62,108, 
  /* [1][0][][] */ 105,127,-116,-65,-84,89,-21,-55,-78,-45,-13,79,-72,59,95,127, 
  /* [2][0][][] */ 127,-72,-80,-105,60,89,96,-10,62,6,60,-52,115,49,62,63, 
  /* [3][0][][] */ -26,127,-37,16,28,-22,34,-15,-4,13,-25,-45,6,-44,12,-21, 
  /* [4][0][][] */ 42,21,21,67,-85,-99,-101,47,80,-56,12,44,-69,-22,127,45, 
  /* [5][0][][] */ 77,108,96,66,56,73,19,127,62,-23,60,-52,-31,-74,-102,91, 
  /* [6][0][][] */ 127,-41,-24,-18,115,117,-4,-2,79,-71,-44,-125,-22,119,-95,122, 
  /* [7][0][][] */ -77,127,4,45,-118,-107,111,100,-70,-75,76,-119,72,48,101,86, 
  /* [8][0][][] */ 107,110,46,122,-18,111,117,-84,127,119,-118,80,-59,-26,114,-79, 
  /* [9][0][][] */ 0,-33,-16,77,-121,93,-125,-106,-49,54,-55,122,124,-105,-59,-127, 
  /* [10][0][][] */ 122,-38,-127,67,90,-27,-39,119,-113,-72,-70,-94,32,100,12,-35, 
  /* [11][0][][] */ -75,-87,51,-109,-78,124,-98,-101,91,-81,88,83,119,-127,-97,-76, 
  /* [12][0][][] */ -1,37,55,38,-60,76,-85,-89,22,20,-49,-42,-80,-127,-91,-63, 
  /* [13][0][][] */ 76,-116,-31,-95,83,52,79,95,66,-82,127,-3,100,103,-15,22, 
  /* [14][0][][] */ 106,114,-126,127,-103,-82,97,119,-98,120,-123,-86,-74,-65,-76,-85, 
  /* [15][0][][] */ -85,94,57,90,-95,-77,-127,77,-81,66,69,-95,-66,-73,-86,82, 
  /* [16][0][][] */ -11,7,-62,-36,-1,26,-12,-101,127,39,-79,54,-49,-56,25,38, 
  /* [17][0][][] */ -100,67,-83,-89,97,-64,-127,-89,76,35,-84,79,-46,52,-105,-92, 
  /* [18][0][][] */ 35,-123,-95,54,96,71,95,52,-102,58,-88,-70,127,52,85,68, 
  /* [19][0][][] */ 66,56,-37,-74,127,80,42,52,-25,56,80,71,-60,-67,-44,63, 
  /* [20][0][][] */ 125,-28,52,45,-22,106,60,101,68,71,46,-127,118,54,14,113, 
  /* [21][0][][] */ -127,-23,-53,-43,-28,-32,-69,83,-44,-60,11,108,-100,6,108,-15, 
  /* [22][0][][] */ 107,-41,-109,-99,112,-2,16,82,3,-63,-103,-126,-7,89,-95,127, 
  /* [23][0][][] */ 117,44,-89,-67,-17,-68,119,-82,101,89,-76,23,127,-71,93,83, 
  /* [24][0][][] */ -123,-59,-5,10,-127,-105,-24,-47,-119,122,-91,75,-83,-28,68,-107, 
  /* [25][0][][] */ 3,-127,-24,-40,12,25,-56,-69,-12,-19,47,80,55,-3,28,-75, 
  /* [26][0][][] */ -74,-83,-92,-68,-81,71,-109,-81,-127,66,80,-73,45,-74,-60,116, 
  /* [27][0][][] */ 60,-51,-111,-120,45,-4,121,-111,39,-84,-127,-54,124,-37,-49,40, 
  /* [28][0][][] */ -109,19,30,124,-108,-120,-58,-64,-95,68,-127,109,-114,-112,16,-104, 
  /* [29][0][][] */ 69,43,-98,84,-13,-41,65,-34,-127,39,-112,108,-74,-117,-119,60, 
  /* [30][0][][] */ 89,83,-94,92,-75,83,-83,-101,43,80,-127,-68,-84,-96,-89,-41, 
  /* [31][0][][] */ -127,-39,70,-29,-99,-44,-92,58,-9,-15,5,-28,-57,59,-19,-40, 
  /* [32][0][][] */ 127,-22,-99,-42,45,114,-1,-65,105,105,66,-111,96,61,68,-67, 
  /* [33][0][][] */ 70,-99,127,-53,63,89,-101,-107,68,118,89,-92,-117,-118,89,34, 
  /* [34][0][][] */ 82,75,-89,113,-110,92,127,90,-8,98,-96,95,-93,120,-78,88, 
  /* [35][0][][] */ -24,4,49,88,80,79,21,89,-4,-79,-40,-127,104,51,-53,108, 
  /* [36][0][][] */ 120,126,79,98,-11,-69,-17,96,117,-74,-95,-103,-42,108,-64,127, 
  /* [37][0][][] */ 42,108,-65,-119,-98,-127,-124,-62,114,86,100,85,-30,-24,90,-98, 
  /* [38][0][][] */ -23,-77,47,-32,-38,-20,-78,-69,-90,-63,-79,-29,104,56,127,-65, 
  /* [39][0][][] */ 105,9,112,127,-55,-32,74,99,97,14,21,67,-54,110,-71,97, 
  /* [40][0][][] */ -39,-34,17,83,-9,-64,-51,-14,-127,-2,26,-38,17,44,23,51, 
  /* [41][0][][] */ -39,53,-13,48,4,-33,31,-34,127,32,-39,9,-69,-34,22,56, 
  /* [42][0][][] */ -124,-127,-24,74,-102,112,-50,-125,-42,103,-118,79,-47,32,-107,-113, 
  /* [43][0][][] */ -15,25,1,91,-56,-68,-40,-23,-35,40,-36,30,10,35,127,-13, 
  /* [44][0][][] */ 106,112,-5,-26,-87,-71,-21,1,-127,-61,106,-47,36,6,87,109, 
  /* [45][0][][] */ 127,29,59,-57,100,-55,90,-50,108,86,28,-4,-48,35,-73,-41, 
  /* [46][0][][] */ 92,31,-121,58,51,127,100,90,-56,30,89,-91,65,-113,-54,-8, 
  /* [47][0][][] */ 116,101,51,-1,70,55,127,89,-18,-2,40,-31,-87,-25,-64,-16, 
  /* [48][0][][] */ 90,51,127,-41,113,93,55,121,-62,-64,99,-56,103,87,-79,99, 
  /* [49][0][][] */ -36,3,48,-85,-8,-105,-53,-5,-110,-104,44,127,-114,-9,-60,-99, 
  /* [50][0][][] */ 68,-27,-90,-101,127,109,111,109,86,1,-40,35,-38,76,-12,101, 
  /* [51][0][][] */ 97,-88,-15,4,74,-29,20,2,126,-69,52,-52,127,-45,41,-92, 
  /* [52][0][][] */ 92,80,53,-127,49,69,82,123,-84,-30,101,-104,-10,-64,21,95, 
  /* [53][0][][] */ 118,-4,46,60,-1,92,127,104,-99,76,-75,-96,7,-75,-96,-3, 
  /* [54][0][][] */ 126,77,-111,-24,44,16,127,117,76,10,121,-46,122,98,-44,122, 
  /* [55][0][][] */ -80,16,-72,-34,-105,-87,57,-104,-76,89,-127,108,65,-92,-36,-100, 
  /* [56][0][][] */ 125,-105,-108,-108,-107,125,111,100,-116,108,-96,-127,114,-105,85,104, 
  /* [57][0][][] */ 100,73,-97,79,-92,97,-101,65,-103,-103,32,-85,-100,-110,-127,92, 
  /* [58][0][][] */ 57,-91,54,-127,109,73,-106,-67,93,-5,-46,122,-39,31,36,-91, 
  /* [59][0][][] */ 127,122,-116,20,-113,113,64,113,-123,-25,96,-48,-36,124,-60,-50, 
  /* [60][0][][] */ 57,36,-3,-50,79,91,68,44,127,-43,3,-41,38,36,-68,58, 
  /* [61][0][][] */ -26,-36,112,106,-36,-57,-115,-40,-35,98,6,103,-105,120,36,-127, 
  /* [62][0][][] */ -127,19,69,-44,70,-99,-82,-117,-76,-29,60,111,16,-103,-22,-96, 
  /* [63][0][][] */ -90,19,-65,-114,-11,-60,67,-30,-125,-70,-109,115,127,-112,75,67, 
  /* [64][0][][] */ -40,-80,2,-71,41,3,92,-67,64,-59,-65,-127,91,-100,22,81, 
  /* [65][0][][] */ -26,61,45,-39,41,102,20,88,3,-73,54,65,100,127,56,55, 
  /* [66][0][][] */ 93,-127,-106,-115,114,118,108,-117,-85,126,-122,-126,112,103,111,-122, 
  /* [67][0][][] */ 85,81,-41,66,-62,-62,74,75,-36,51,-61,-127,58,-45,-71,80, 
  /* [68][0][][] */ 50,40,-88,107,42,17,8,61,-44,-76,-28,25,97,-43,127,-14, 
  /* [69][0][][] */ -1,-34,-53,-81,-28,61,-40,-99,-85,12,15,-127,-111,-120,-98,112, 
  /* [70][0][][] */ 114,-100,-112,-93,125,115,97,-121,-65,-99,-104,96,127,-101,99,104, 
  /* [71][0][][] */ 76,-79,-91,-127,-121,73,-76,-59,53,-71,47,-72,-38,73,98,66, 
  /* [72][0][][] */ -48,-127,-57,-29,43,3,-109,50,41,-49,-100,-10,-70,63,123,44, 
  /* [73][0][][] */ -95,-106,-9,41,-59,-114,61,-28,-4,63,-62,24,53,-29,100,-127, 
  /* [74][0][][] */ 81,40,-17,-74,127,-49,-119,-96,-102,-90,-95,101,24,-106,8,105, 
  /* [75][0][][] */ -110,-122,-21,41,-108,-98,-22,-127,-87,-36,-32,-26,-71,-74,-12,-16, 
  /* [76][0][][] */ 31,-92,43,47,17,-51,-48,127,11,17,27,-35,-28,83,106,38, 
  /* [77][0][][] */ -37,22,-67,32,-49,-8,8,-19,-114,-86,127,-60,96,17,-36,-41, 
  /* [78][0][][] */ 36,-70,-33,-44,-30,-26,35,43,-23,-47,127,51,82,-42,34,34, 
  /* [79][0][][] */ 127,37,6,3,-15,94,79,57,18,60,71,-102,14,38,-87,88, 
  /* [80][0][][] */ -60,-19,6,22,-71,-91,-89,-76,-71,62,-127,6,-108,25,15,9, 
  /* [81][0][][] */ -24,-127,-12,22,-26,-21,-20,-98,35,42,9,-9,95,46,61,21, 
  /* [82][0][][] */ 108,-75,-117,-101,116,98,-74,-73,-78,-95,127,16,-26,94,-4,58, 
  /* [83][0][][] */ 93,72,-94,41,-68,127,82,64,-10,-22,54,-105,-59,36,36,107, 
  /* [84][0][][] */ -86,-115,58,-102,3,-64,-84,-101,-104,-88,80,89,127,74,-116,-77, 
  /* [85][0][][] */ 108,107,-95,112,-120,95,127,-58,-64,120,107,-102,97,91,-99,-77, 
  /* [86][0][][] */ 18,126,-96,-3,-98,34,-100,8,-69,28,-100,35,6,94,51,127, 
  /* [87][0][][] */ 45,65,-41,30,-18,114,120,65,-127,81,-20,-97,109,50,-103,-18, 
  /* [88][0][][] */ 28,15,49,40,42,-74,39,53,42,19,61,34,-127,-6,15,31, 
  /* [89][0][][] */ -49,100,-36,-102,-95,61,67,127,-69,107,24,103,81,49,6,78, 
  /* [90][0][][] */ 40,-66,-37,67,24,92,19,28,17,-43,-52,-13,127,85,-52,-5, 
  /* [91][0][][] */ 20,-22,31,-51,-10,-10,-60,33,31,-41,-39,71,-76,-127,27,25, 
  /* [92][0][][] */ -66,-64,-45,-69,93,26,127,61,99,93,24,-107,-71,92,-71,84, 
  /* [93][0][][] */ -101,-97,-63,-51,-127,13,-115,-9,-111,-21,61,116,-95,-30,-65,-89, 
  /* [94][0][][] */ -93,-79,-99,81,-62,-23,84,75,127,81,-79,-24,86,80,61,78, 
  /* [95][0][][] */ -74,-108,-97,44,84,75,80,85,80,69,-65,127,78,26,-79,119, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00088560249423608184, 0.0017218238208442926, 0.00035395118175074458, 0.0031898713205009699, 0.00011778600310208276, 0.0013492364669218659, 0.00048270510160364211, 0.0008706841035746038, 4.0568069380242378e-05, 1.410298136761412e-05, 0.0019233959028497338, 0.00092562130885198712, 0.0014815722825005651, 0.00042830905294977129, 0.00040065401117317379, 0.00011671362881315872, 0.0018149444367736578, 0.0010008331155404449, 0.00062169006559997797, 0.0014366081450134516, 0.0012829818297177553, 0.00029590530903078616, 0.0002015034988289699, 0.00087389937834814191, 0.00092004163889214396, 0.0016725122695788741, 0.00029758448363281786, 0.0001337277062702924, 2.1860825654584914e-05, 0.00058725901180878282, 2.849345764843747e-05, 0.00010659321560524404, 0.00067545362981036305, 0.0006974840653128922, 0.00055562274064868689, 0.00098616559989750385, 0.00017574896628502756, 0.00016188889276236296, 0.00084555067587643862, 0.001091416459530592, 0.0015842379070818424, 0.0018259891076013446, 0.0002006254653679207, 0.00094155955594033003, 4.2315579776186496e-05, 0.00044482064549811184, 0.00043437120621092618, 0.0001956387422978878, 0.00019304445595480502, 3.1045336072565988e-05, 0.00044009566772729158, 0.0011402105446904898, 0.00044586084550246596, 6.816102541051805e-05, 1.2936077837366611e-05, 0.00012632511788979173, 0.00087559048552066088, 0.00017936321091838181, 0.0012928358046337962, 0.00087822380010038614, 0.0006334869540296495, 8.8503336883150041e-05, 0.00011308742978144437, 0.0010287777986377478, 0.00090150174219161272, 0.00047855937737040222, 0.00065381842432543635, 4.3439889850560576e-05, 0.00036467710742726922, 0.0007692782673984766, 0.00015152663399931043, 0.00094539934070780873, 0.00078059843508526683, 0.00085299782222136855, 0.0016288767801597714, 0.00011864263069583103, 0.0021958420984447002, 0.001658987021073699, 0.0014324875082820654, 0.00018884085875470191, 0.00069583207368850708, 0.00065417162841185927, 0.00069529731990769506, 0.00037663508555851877, 0.00087549089221283793, 0.0011766061652451754, 0.0015885538887232542, 3.2469139114255086e-05, 0.0010933422017842531, 0.00088777666678652167, 0.00057030894095078111, 0.0037458725273609161, 0.0005696722655557096, 0.00054450350580736995, 0.0007620992255397141, 0.00034980493364855647, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 5899, -1210, 40223, 2301, 156150, 4260, -9199, 2922, 343591, -682871, 2725, -2394, 1828, 12337, 27771, 63932, -3918, -1194, 16135, 4052, -296, 27138, 37362, -6455, 4844, 189, 34186, 54721, 715843, 15418, 635739, 122964, 12291, 7687, 21826, -1894, 42138, 70778, 10030, 604, -1616, 144, 89101, -2746, 482171, 16580, 27251, -71977, 54687, 422688, -5473, -3664, -17864, -76825, -791846, -92039, 6795, 61163, 3240, -2004, 37010, 101133, 130536, 1979, 20470, 20464, 872, -255517, 67090, -8342, 57270, 4444, 9992, -2207, -1247, -122628, 4727, -5563, 4585, -66805, 5120, 18026, 3645, 20258, -404, 8388, -4075, 632000, -905, 17480, 17325, -1312, 2086, 7089, 2253, 33500, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00024311822198797017, 0.00047268017078749835, 9.7167729109060019e-05, 0.00087569293100386858, 3.2334963179891929e-05, 0.00037039638846181333, 0.00013251363998278975, 0.00023902277462184429, 1.1136866305605508e-05, 3.8715920709364582e-06, 0.00052801636047661304, 0.00025410429225303233, 0.00040672562317922711, 0.00011758066830225289, 0.00010998872312484309, 3.2040570658864453e-05, 0.00049824389861896634, 0.00027475165552459657, 0.00017066819418687373, 0.00039438193198293447, 0.00035220797872170806, 8.1232799857389182e-05, 5.5317337682936341e-05, 0.00023990545014385134, 0.00025257255765609443, 0.00045914301881566644, 8.1693775427993387e-05, 3.6711324355565012e-05, 6.0012985159119125e-06, 0.00016121608496177942, 7.8221082731033675e-06, 2.9262284442665987e-05, 0.00018542753241490573, 0.00019147539569530636, 0.00015253119636327028, 0.00027072511147707701, 4.8247125960187986e-05, 4.444221849553287e-05, 0.00023212307132780552, 0.00029961887048557401, 0.00043490968528203666, 0.00050127593567594886, 5.5076296121114865e-05, 0.00025847970391623676, 1.1616598385444377e-05, 0.00012211347348056734, 0.00011924486898351461, 5.370732833398506e-05, 5.2995135774835944e-05, 8.5226574810803868e-06, 0.00012081636668881401, 0.00031301396666094661, 0.00012239904026500881, 1.8711765733314678e-05, 3.5512503018253483e-06, 3.4679145755944774e-05, 0.0002403696853434667, 4.9239319196203724e-05, 0.00035491312155500054, 0.00024109259538818151, 0.00017390670836903155, 2.429619780741632e-05, 3.104509596596472e-05, 0.00028242313419468701, 0.00024748293799348176, 0.00013137553469277918, 0.0001794881682144478, 1.1925247235922143e-05, 0.00010011223639594391, 0.00021118455333635211, 4.1597540985094383e-05, 0.0002595338155515492, 0.00021429218759294599, 0.00023416748445015401, 0.00044716408592648804, 3.2570125767961144e-05, 0.00060280907200649381, 0.00045543003943748772, 0.00039325072430074215, 5.1841150707332417e-05, 0.00019102188525721431, 0.0001795851276256144, 0.00019087508553639054, 0.00010339498112443835, 0.00024034235684666783, 0.00032300539896823466, 0.00043609450221993029, 8.913523743103724e-06, 0.00030014754156582057, 0.00024371508334297687, 0.00015656289178878069, 0.0010283279698342085, 0.000156388123286888, 0.00014947871386539191, 0.00020921372924931347, 9.6029485575854778e-05, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -20,5,-72,127,33,50,84,5,-98,-62,-48,-3,51,-6,-71,-9,-10,-16,42,-70,-26,-2,84,83,-69,43,-92,-31,5,-90,-8,127,-24,-57,25,19,-40,88,1,-49,-103,-1,-9,88,59,-96,-14,35,1,5,-60,-15,-13,-58,78,-3,127,-2,-41,27,34,-19,-43,-22,36,-72,127,79,42,-52,-1,-121,11,-2,0,22,46,24,59,-49,121,-35,-19,28,33,-125,-63,-78,0,-102,-107,54,-12,-37,19,-60, 127,41,-29,65,-64,127,-87,-127,65,-77,32,-76,127,-91,-14,-51,94,-127,64,53,-27,-48,55,-102,-127,127,79,-75,-36,93,-127,87,-125,-99,-86,-127,-23,77,-34,-36,-67,-99,91,120,-22,-127,-127,-16,18,121,37,5,11,7,100,-93,-9,66,110,-50,-19,-17,-127,-80,50,-127,96,61,-13,38,24,-127,29,127,23,28,34,127,19,56,8,12,50,-12,-61,-127,-62,55,-10,-127,0,127,42,-101,-22,-127, -3,-28,-101,3,-26,75,-5,45,42,-126,-99,-72,26,-90,-56,-69,-112,41,0,-38,-127,-55,32,-29,-103,-54,30,-82,4,101,-66,21,-75,-110,-53,-55,49,-71,25,-50,58,-4,-127,119,-20,-48,-15,19,1,-56,-50,-12,29,-48,55,24,93,37,-11,52,-127,-79,-69,-57,40,-119,67,111,-18,113,-27,-2,24,38,70,-18,62,-13,39,-43,-71,-56,-21,-9,-36,-88,-62,15,-29,-72,-37,21,-57,51,-46,22, 
  /* [0][1][][] */ -4,17,18,5,-25,26,127,118,-127,-118,-46,12,62,-47,-73,49,86,-22,24,-51,30,29,-3,-55,0,38,-127,-76,29,112,73,-7,-86,28,-127,-28,-47,-35,-107,-127,-97,29,51,23,18,14,5,24,-16,-28,40,-25,-78,35,2,13,-47,127,-20,-10,58,-62,-44,-127,-50,-73,-84,-126,94,2,127,-43,-49,26,64,36,-5,0,21,11,74,57,-127,65,-59,13,-87,-2,14,-127,-126,25,-127,-80,-33,-47, 73,-127,43,-57,113,11,87,-9,-86,74,127,7,-67,-72,127,44,127,-44,-127,60,83,10,-127,-127,-27,41,68,127,-71,127,-120,-106,-86,-11,34,57,127,107,-127,-27,-69,71,66,-40,-14,-64,-61,-127,127,64,92,9,78,-127,3,127,-119,-65,127,127,-32,-73,-56,64,-127,108,-50,25,-116,-11,-44,0,-127,-60,-127,127,-127,97,1,127,77,61,-47,-127,83,-44,41,-6,68,51,108,58,28,3,127,51, 2,-32,-66,41,-86,-30,1,-46,13,-120,-40,-127,-38,9,-48,80,28,-50,-8,-127,-12,-91,-55,-71,0,-71,88,-50,-107,8,-18,-124,-127,-127,-50,-34,26,-127,-32,-100,90,-32,-87,-14,-127,-72,51,26,-18,-127,-22,32,-56,115,-106,23,-33,30,-42,32,-62,127,39,-24,6,-30,117,-63,-127,127,24,98,23,-66,23,20,63,80,-77,4,-127,-91,52,-25,33,79,0,60,-46,77,-65,47,45,127,-66,21, 
  /* [0][2][][] */ -25,-16,-103,52,27,43,14,-49,-29,-94,-84,-58,82,48,19,127,64,-54,52,-77,-32,-24,-2,73,-49,105,-12,-67,26,85,-61,108,-68,109,-67,-14,-60,-71,-118,-79,-127,95,14,-12,-8,-83,15,-28,-28,55,62,-78,49,-56,-44,4,75,54,18,46,28,-61,-6,-41,-68,-59,-38,33,-38,-58,56,21,54,-92,-16,-16,40,-46,127,-45,35,-43,-27,31,-108,47,12,-127,41,-27,-127,-19,-29,0,5,-6, 88,-70,-127,-15,-127,-8,-49,-54,-75,-127,19,23,-42,127,3,116,-44,62,11,-31,32,-90,-21,36,-106,6,8,24,-127,7,-77,-70,-122,-92,-26,-46,26,-43,-11,-116,-46,127,10,-83,-98,-53,-27,-98,-36,33,9,-127,74,7,-127,-124,2,29,67,33,28,-69,3,-18,-41,24,115,-127,10,14,-42,94,44,-102,-82,-22,12,-49,0,9,-32,-127,-102,11,-5,-66,127,-4,56,75,75,107,-44,11,15,-27, -11,-52,-97,40,-28,5,-60,-72,-43,-59,16,-66,-50,-49,-29,78,-80,-26,16,-27,9,-127,4,-6,-57,101,15,-21,-94,-9,-77,-88,-47,-81,-53,-89,27,-42,23,-46,52,30,-84,-127,-91,37,62,-15,-24,-2,127,-65,127,24,-116,14,78,21,-8,-21,15,-54,31,-34,69,-34,46,87,-51,39,-25,21,27,-105,-30,-11,28,-114,-36,28,-24,-106,-32,-15,127,62,66,-54,127,68,14,72,31,73,9,-37, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.00064605911029502749, 0.0013921245699748397, 0.0022494916338473558, 0.0055478536523878574, 0.0056544030085206032, 0.0041842339560389519, 0.0079007372260093689, 0.0015677998308092356, 0.012862393632531166, 0.0014429176226258278, 0.00047052357695065439, 0.0013539651408791542, 0.0061967223882675171, 0.0082962466403841972, 0.0039783879183232784, 0.00065594352781772614, 0.0026424315292388201, 0.0031153338495641947, 0.0049375118687748909, 0.0015766039723530412, 0.001892942818813026, 0.00091906677698716521, 0.00039425684371963143, 0.0066900793462991714, 0.0030121062882244587, 0.0023268195800483227, 0.0020813476294279099, 0.0026677811983972788, 0.007948312908411026, 0.00035141312400810421, 0.010494539514183998, 0.00318691018037498, 0.00375963537953794, 0.0015191033016890287, 0.00028030062094330788, 0.0037439889274537563, 0.0042353859171271324, 0.0018074249383062124, 0.0073824548162519932, 0.00066582381259649992, 0.011527927592396736, 0.0076697608456015587, 0.011331289075314999, 0.0041381716728210449, 0.0073820543475449085, 0.0042791469022631645, 0.0086657078936696053, 0.055583007633686066, 0.011956499889492989, 0.0014610218349844217, 0.0095539242029190063, 0.0086550796404480934, 0.0041341977193951607, 0.17494860291481018, 0.12156302481889725, 0.17037416994571686, 0.0010457946918904781, 8.7038322817534208e-05, 0.00018735053890850395, 7.9951925727073103e-05, 0.010779659263789654, 0.0022774406243115664, 0.0054085953161120415, 0.0025760831777006388, 0.0013895733281970024, 0.0034222705289721489, 0.00019527079712133855, 0.30088022351264954, 0.005687568336725235, 0.013060749508440495, 0.002086590975522995, 0.00077564630191773176, 0.016378069296479225, 0.0069325529038906097, 0.002557218074798584, 0.044797010719776154, 0.0073006674647331238, 0.0058984626084566116, 0.0087640359997749329, 3.0074026584625244, 0.0076773450709879398, 0.0071131261065602303, 0.0020755026489496231, 0.0019767805933952332, 0.0016938855405896902, 0.0036072232760488987, 0.012923521921038628, 0.0085647730156779289, 0.005894798319786787, 0.0047637759707868099, 0.0072957589291036129, 0.0010030869161710143, 0.0071881539188325405, 0.0076752719469368458, 0.0022491158451884985, 0.0022344293538480997, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 134400, 261642, 130232, -24464, 46633, -17289, -832, -14706, 52185, 52975, -268225, -45455, -11920, -3893, 9651, -59495, -48243, -9149, -2339, 4493, 85791, -30321, -49334, -5774, -12186, -17583, -69035, 69775, 62161, -411021, 90933, -5391, 117150, -49961, -28552, -30343, -34073, -41571, 34290, -82547, -5633, -14933, -4398, -13060, 64704, 50302, 11956, 355, -16902, -14255, -7613, 35042, -13341, 642, -437, 1346, 80567, -1121891, -140971, -570027, 259, -14, 27085, 14437, -9111, 74055, -418826, -326, 46240, -3755, -24232, -37361, -4841, 8247, -25834, -1199, -658, -1068, -1199, 15, -3770, 45877, 12649, -31632, 78317, 6258, -4049, 23549, -25363, 24234, 29003, 45978, -7502, -1387, -47254, -13036, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 1.520139085187111e-05, 3.2755873689893633e-05, 5.2929215598851442e-05, 0.00013053773727733642, 0.00013304478488862514, 9.8452568636275828e-05, 0.00018589969840832055, 3.6889407056150958e-05, 0.00030264456290751696, 3.3951004297705367e-05, 1.1071143489971291e-05, 3.1858002330409363e-05, 0.00014580522838514298, 0.00019520580826792866, 9.3609130999539047e-05, 1.543396501801908e-05, 6.2174862250685692e-05, 7.3301976954098791e-05, 0.00011617675045272335, 3.7096564483363181e-05, 4.4539832742884755e-05, 2.1625100998790003e-05, 9.2766322268289514e-06, 0.0001574136404087767, 7.0873087679501623e-05, 5.4748696129536256e-05, 4.8972884542308748e-05, 6.2771323428023607e-05, 0.00018701913359109312, 8.2685446614050306e-06, 0.00024693034356459975, 7.4986121035180986e-05, 8.8462009443901479e-05, 3.5743607440963387e-05, 6.5953090597759001e-06, 8.8093860540539026e-05, 9.9656142992898822e-05, 4.2527644836809486e-05, 0.00017370482964906842, 1.5666442777728662e-05, 0.00027124537155032158, 0.00018046496552415192, 0.00026661856099963188, 9.7368749266024679e-05, 0.00017369540000800043, 0.00010068581468658522, 0.00020389900601003319, 0.0013078354531899095, 0.00028132941224612296, 3.4376986150164157e-05, 0.00022479821927845478, 0.00020364893134683371, 9.7275245934724808e-05, 0.0041164378635585308, 0.002860306529328227, 0.0040088039822876453, 2.4606933948234655e-05, 2.0479606064327527e-06, 4.4082480599172413e-06, 1.8812218058883445e-06, 0.00025363903841935098, 5.3586838475894183e-05, 0.00012726106797344983, 6.0613721871050075e-05, 3.2695843401597813e-05, 8.0524012446403503e-05, 4.5946071622893214e-06, 0.0070795346982777119, 0.00013382514589466155, 0.0003073117695748806, 4.9096259317593649e-05, 1.8250500943395309e-05, 0.00038536635111086071, 0.00016311889339704067, 6.0169837524881586e-05, 0.0010540473740547895, 0.00017178041161969304, 0.00013878736353944987, 0.00020621261501219124, 0.070762418210506439, 0.00018064341566059738, 0.00016736767429392785, 4.883535802946426e-05, 4.6512486733263358e-05, 3.9856131479609758e-05, 8.4875842730980366e-05, 0.00030408287420868874, 0.00020152407523710281, 0.0001387011434417218, 0.00011208884825464338, 0.00017166491306852549, 2.3602045985171571e-05, 0.00016913303988985717, 0.0001805946376407519, 5.2920375310350209e-05, 5.2574810979422182e-05, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -83,75,109,71,127,85,73,89,77,-64,65,93,98,61,87,-64,48,84,-93,-80,61,76,-74,88,81,-99,-75,106,78,55,114,75,94,-77,71,82,-16,-57,-73,72,102,125,106,99,113,-79,93,62,101,88,72,116,107,79,69,-48,-67,103,85,84,111,77,88,-48,18,48,69,92,94,110,-11,-81,-91,-15,86,12,-106,60,-85,106,81,101,92,-35,80,81,73,65,17,55,84,63,91,-77,32,69, 
  /* [1][0][][] */ -76,67,19,93,107,79,20,-1,2,40,-23,33,83,20,-51,43,27,-50,-32,-36,65,-6,88,-12,73,-33,-59,-107,96,69,43,51,96,12,-86,84,73,-25,93,77,57,38,77,76,121,-37,20,81,99,70,43,103,91,93,90,-29,54,-9,53,74,127,-46,55,79,-17,17,64,84,72,-32,34,-62,-57,-45,74,88,-102,14,-102,56,91,96,-66,79,-53,68,10,69,-15,-39,7,72,86,-13,-77,-13, 
  /* [2][0][][] */ -60,-57,-64,70,-20,-82,14,44,51,9,-12,32,-75,-52,66,23,-16,53,-10,68,57,-51,-4,-66,-63,48,65,-16,-87,-52,-58,-73,-71,55,-21,-20,-87,-75,-13,-56,127,-40,-68,17,-56,83,-49,-2,-48,-65,-73,42,-58,-62,-62,18,56,-70,-7,29,51,65,-38,-5,-22,24,-2,56,-37,79,-9,60,54,83,-51,-20,62,-68,23,58,-77,-88,11,7,-77,-53,36,-70,4,4,-60,-57,40,88,-41,55, 
  /* [3][0][][] */ -84,81,102,108,-105,-111,67,46,96,-80,92,122,92,49,61,-113,69,111,-65,-90,39,98,-99,-92,75,-40,-82,77,72,62,13,51,85,-87,84,64,-35,-74,84,79,116,81,42,63,111,-114,105,105,99,81,97,95,102,102,74,-90,-67,68,67,99,91,104,91,40,40,80,84,90,-25,105,-119,-75,-34,-36,88,55,-87,69,-95,85,93,103,-20,-85,96,73,72,88,77,103,119,53,42,-127,84,-21, 
  /* [4][0][][] */ -29,44,50,78,-50,37,-106,-78,68,-50,57,73,-10,58,25,-48,28,-4,-24,-32,19,63,-61,-78,56,-48,52,22,-80,39,51,48,72,-44,52,54,38,-62,122,54,98,42,-25,26,58,71,21,56,49,7,-106,75,52,47,40,-61,-9,42,-22,55,59,79,70,-22,36,88,51,69,-75,37,-61,-55,-46,49,54,-1,-68,0,-92,47,57,15,35,-36,33,-28,85,11,17,90,60,-7,34,127,49,-72, 
  /* [5][0][][] */ -38,44,35,25,-17,-81,-93,42,107,24,71,-48,64,46,-117,-69,63,74,-25,-79,-92,85,-93,-69,48,-40,-61,51,-104,54,-9,29,39,-66,58,-1,0,63,75,-24,95,32,1,-103,46,-36,39,-35,35,36,53,61,48,60,11,-91,88,-83,-21,73,5,93,97,63,48,105,70,97,-4,97,-86,-66,68,80,58,42,-61,39,-62,102,36,25,44,-72,56,-68,84,96,82,120,21,-88,-19,127,57,76, 
  /* [6][0][][] */ -72,68,92,-116,88,-113,79,84,99,23,80,74,74,79,72,-80,80,89,-78,-85,55,96,-81,71,78,-72,-84,81,62,85,64,82,97,-83,93,85,-46,-90,92,62,94,70,81,63,101,-91,69,43,83,80,77,105,84,70,73,-86,-83,66,81,85,84,103,85,-127,92,78,83,77,51,100,-78,-81,-94,-74,73,65,-99,79,-81,69,85,97,-65,-86,79,79,96,90,85,91,95,75,78,-83,77,78, 
  /* [7][0][][] */ -74,99,103,28,127,-44,90,81,59,-101,84,50,74,69,-38,-72,81,74,-72,-75,85,75,-70,80,76,-86,-77,74,83,74,65,65,85,-79,60,81,-54,-78,79,93,67,72,90,75,96,-84,75,34,79,78,89,91,90,73,76,-71,-71,82,76,82,89,62,64,-68,103,87,74,61,71,73,-69,-64,-77,-63,82,91,-70,91,-73,67,73,86,-94,-90,77,71,64,82,76,69,65,69,69,-97,84,88, 
  /* [8][0][][] */ 46,-60,-95,9,-83,8,-50,-84,114,41,-33,81,-75,31,11,-68,-58,-64,54,68,-80,-24,22,-67,-78,1,66,-6,-89,-62,81,9,5,39,0,-68,35,38,8,-65,75,-86,-88,-3,-96,57,68,-24,-90,-48,-32,-79,-4,43,14,60,64,15,-56,-61,-91,7,92,-46,-46,-1,-67,-71,-73,70,-87,-100,-13,-40,27,-76,39,-3,79,-64,-105,-92,77,-41,-63,67,21,-62,-59,84,127,-63,-71,102,-66,-72, 
  /* [9][0][][] */ 64,-75,-64,32,-52,12,-68,-75,-32,74,-54,-46,-54,-61,-50,41,-60,-61,72,67,-50,-67,53,-78,-74,-67,62,-57,-56,-67,-79,-73,-66,62,-58,-58,66,56,-76,-45,-23,-99,-81,-54,-55,65,-76,-49,-61,-73,-73,-67,-51,-62,-33,56,55,-75,-48,-51,-69,-44,-40,-53,-90,-62,-61,-68,-80,-50,-42,49,86,-4,-74,-19,55,-69,65,-60,-66,-67,7,65,-64,58,-51,-65,-55,23,-51,-49,-73,127,-61,-72, 
  /* [10][0][][] */ -55,34,-22,38,12,-53,44,30,75,33,68,12,51,61,-82,-42,76,57,-11,-45,67,65,-58,33,34,50,-26,29,22,19,-71,8,37,-45,46,33,-63,-42,16,57,127,-5,-11,30,26,12,60,88,34,16,54,68,23,35,62,-67,39,-65,42,39,62,72,51,-51,-50,79,58,50,-25,49,-5,-59,-28,69,51,65,-48,38,-53,78,47,28,70,-38,48,42,67,34,66,69,35,55,18,19,4,45, 
  /* [11][0][][] */ -80,-53,-99,-16,-80,-105,-56,-65,54,-11,-34,-33,-75,7,33,-78,8,-59,-36,-89,57,-7,19,-75,-68,40,67,-22,-90,-47,-27,-30,-81,23,-19,-78,-8,57,22,-56,37,-42,-80,-79,-101,71,87,11,-86,26,58,-119,-88,-92,-71,22,58,27,-72,-58,-127,22,-15,3,2,-8,-40,-55,-76,26,-64,34,44,-69,-58,-77,37,-12,-15,-16,-91,-95,21,-89,65,-17,7,-75,-8,42,-67,-82,-76,61,-65,15, 
  /* [12][0][][] */ 52,-75,-62,-77,-59,4,-83,-84,-24,86,-30,41,22,-81,-57,-29,-66,-41,80,49,-106,16,34,13,-76,15,60,-35,-72,-65,-88,-56,-82,54,-30,-54,36,45,-87,-78,-49,-74,-78,-3,5,-43,13,64,-73,-81,-50,-22,15,-60,-84,43,-38,-82,-32,-31,-120,11,21,15,54,-31,-66,-56,-70,13,-71,65,25,-8,-66,-69,84,-59,69,-92,-71,-62,58,9,-53,77,-59,-68,-56,14,127,-59,-8,-37,65,-59, 
  /* [13][0][][] */ 54,-67,-80,89,-127,90,-67,-76,-49,-50,-15,80,105,-56,-83,43,-67,-40,87,72,100,-33,56,-85,-71,79,-65,-64,76,-82,-107,-85,-90,69,-65,-68,35,76,-74,-58,-59,-71,-118,-60,-70,52,78,-52,-64,-92,29,-55,70,-86,16,61,68,-64,-86,-56,-71,-21,94,-70,-98,-66,-67,-67,-119,79,-90,-31,88,-13,-74,99,72,-61,64,0,-58,-94,100,-65,-67,51,-31,-70,-45,-36,-48,-69,-71,-22,-70,-11, 
  /* [14][0][][] */ 47,-51,-70,-87,-62,94,-9,-52,-102,51,-63,62,-76,-62,-39,44,-61,-62,48,55,-50,-48,53,52,-66,76,50,-60,31,-66,-78,-76,-87,57,-55,-60,10,63,-92,-67,-127,-50,-68,18,-77,35,-35,-66,-42,-55,-52,-82,-73,-48,-46,60,64,-64,14,-54,-80,-44,-28,-39,-70,-55,-57,-61,-23,-58,59,54,116,-121,-56,-27,95,-52,72,-91,-61,-78,39,-13,-53,-68,-62,-59,-58,-63,-74,-52,-53,-72,-59,-82, 
  /* [15][0][][] */ 59,70,113,-42,116,49,94,82,-80,-21,77,-118,100,60,-63,97,-4,-100,-59,-56,72,26,-65,72,96,-80,-81,66,109,-33,92,1,100,-77,86,109,-31,-77,-69,88,80,-76,118,69,124,-88,27,57,121,85,76,76,113,-42,100,-53,-97,-63,84,108,127,-7,-1,-104,34,43,-90,64,111,-53,-38,-38,-39,-10,75,89,-38,-105,52,39,93,122,-51,-61,100,48,7,88,-115,28,117,115,105,86,79,-85, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0019206590950489044, 0.0033264942467212677, 0.0030058927368372679, 9.3416483650798909e-06, 0.0051580765284597874, 0.0031487853266298771, 0.00094234425341710448, 0.00065333489328622818, 0.0022070694249123335, 0.0016129367286339402, 0.0086093610152602196, 0.0033653248101472855, 0.0024507534690201283, 0.00096617179224267602, 0.004490481223911047, 0.0017279555322602391, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -164342, -98512, 39912, 838396, -88637, -73841, -131641, -148552, 32721, 101919, -81397, 105028, 101648, 69402, 121968, -150736, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 4.5191980461822823e-05, 7.8270451922435313e-05, 7.0726891863159835e-05, 2.1980349629302509e-07, 0.00012136650911998004, 7.4089068220928311e-05, 2.2172805984155275e-05, 1.5372586858575232e-05, 5.1931045163655654e-05, 3.7951453123241663e-05, 0.00020257321011740714, 7.9184115747921169e-05, 5.7664787163957953e-05, 2.2733454898116179e-05, 0.00010565838601905853, 4.0657778299646452e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ 64,-20,-71,-55,96,23,90,2,-84,-63,-19,-127,-18,-67,-104,39, 
  /* [1][0][][] */ 97,127,-109,57,65,52,46,-110,39,-46,-34,-93,29,-104,-95,101, 
  /* [2][0][][] */ 58,-52,-60,30,127,77,14,-68,59,80,-89,26,53,-76,-113,27, 
  /* [3][0][][] */ 78,47,-25,59,113,127,4,-71,28,89,-10,-83,48,51,-116,13, 
  /* [4][0][][] */ -21,49,71,127,57,81,-19,84,101,64,-2,29,94,96,-39,-82, 
  /* [5][0][][] */ 82,66,-123,24,-51,-67,45,-32,-117,120,-127,-22,89,-53,49,107, 
  /* [6][0][][] */ 37,57,-58,61,-127,-67,53,69,-54,7,-70,-51,-60,-62,74,48, 
  /* [7][0][][] */ 108,111,-64,-89,127,4,44,-56,-77,-5,-62,-95,-68,-24,-116,77, 
  /* [8][0][][] */ 103,90,-81,41,127,51,51,-42,-73,72,-48,-123,35,36,-99,95, 
  /* [9][0][][] */ -89,-127,90,-39,36,17,-123,-78,89,-52,83,79,-35,55,-8,-116, 
  /* [10][0][][] */ -25,-28,-127,-37,-31,35,47,-32,29,6,1,28,36,14,25,-35, 
  /* [11][0][][] */ 6,53,26,-103,25,-127,43,29,-93,30,-47,-42,-87,-40,-41,4, 
  /* [12][0][][] */ -98,-106,-55,58,-104,-115,10,127,-70,111,-70,28,105,53,52,126, 
  /* [13][0][][] */ 98,124,0,22,59,6,65,127,-92,-98,102,-118,23,-14,-93,114, 
  /* [14][0][][] */ -48,-89,-43,-13,-91,-49,-127,-105,-13,-40,-98,95,56,-43,111,15, 
  /* [15][0][][] */ -69,-125,64,-42,-68,-18,-127,-74,81,-2,-85,74,-90,68,108,-106, 
  /* [16][0][][] */ 79,72,-72,-115,56,-91,-84,-14,-71,-127,-62,-79,-86,-83,-64,90, 
  /* [17][0][][] */ -113,-51,104,-110,-42,12,-104,-127,95,-86,90,110,-39,31,109,-115, 
  /* [18][0][][] */ 69,42,-127,-111,120,-84,-60,-102,-96,100,-121,-89,55,-103,78,103, 
  /* [19][0][][] */ -83,-46,127,52,23,-44,0,45,4,11,70,37,-91,-26,111,-58, 
  /* [20][0][][] */ 127,89,-101,47,125,57,117,79,-109,42,108,-100,-77,-56,-124,90, 
  /* [21][0][][] */ 127,77,-89,30,45,14,-36,-87,-40,17,-15,-82,-37,-71,-87,64, 
  /* [22][0][][] */ -98,-61,-74,24,-55,96,21,-127,62,98,11,71,93,48,54,-73, 
  /* [23][0][][] */ -19,0,-8,34,52,-6,41,-107,37,127,-85,31,91,-52,-59,33, 
  /* [24][0][][] */ -74,-108,0,-45,-34,-127,-19,-63,97,7,-9,111,-93,-88,93,-53, 
  /* [25][0][][] */ 44,54,8,34,-38,-84,56,88,-73,43,127,-67,-76,-74,-59,61, 
  /* [26][0][][] */ 125,107,-9,96,88,-28,120,100,-84,84,6,-121,-12,-2,-127,90, 
  /* [27][0][][] */ -70,-52,73,-8,-106,-126,-85,97,-36,-86,15,57,-118,77,127,-16, 
  /* [28][0][][] */ 109,127,-42,-43,91,51,122,-35,-90,4,22,-115,15,1,-73,95, 
  /* [29][0][][] */ -103,-69,-51,105,-114,-111,-42,-85,-66,107,-97,47,-127,-56,114,-55, 
  /* [30][0][][] */ 102,127,-56,65,119,38,-9,33,-74,31,-86,-116,41,-93,-102,98, 
  /* [31][0][][] */ 37,-66,-120,-58,107,-7,127,81,52,72,113,-97,-49,-30,-125,95, 
  /* [32][0][][] */ 78,127,-49,6,15,42,92,8,-97,-62,-10,-99,27,-47,-71,97, 
  /* [33][0][][] */ 70,112,-124,108,68,30,92,82,-15,87,-64,-127,50,-38,-114,113, 
  /* [34][0][][] */ 123,113,-80,20,-54,-115,101,7,-55,127,-114,-103,-112,-1,105,55, 
  /* [35][0][][] */ -2,69,-17,-25,-51,-86,108,3,-94,-39,75,-8,4,-5,28,127, 
  /* [36][0][][] */ 36,40,95,-104,-28,-87,-47,63,-44,53,-46,-43,-127,-28,76,44, 
  /* [37][0][][] */ 101,109,-110,-77,46,-122,112,127,-91,120,-110,-101,-120,-1,-30,118, 
  /* [38][0][][] */ 91,96,-68,30,127,-17,68,42,-52,110,-64,-80,-73,13,-14,108, 
  /* [39][0][][] */ -12,-13,-36,-45,-112,-100,42,58,-89,-43,-61,-51,-66,-127,124,31, 
  /* [40][0][][] */ -61,-78,80,-93,127,88,-70,-85,61,-96,104,71,79,31,59,-79, 
  /* [41][0][][] */ 89,84,64,85,63,-127,92,100,-75,91,-13,-75,24,107,11,87, 
  /* [42][0][][] */ 36,68,-35,81,75,91,9,-127,1,8,36,-63,4,-27,-77,-13, 
  /* [43][0][][] */ 41,46,-33,-55,-109,-82,-5,76,-69,-75,-52,-58,-88,-42,127,64, 
  /* [44][0][][] */ 127,50,-103,-60,102,-7,42,-84,-78,-68,30,-83,-45,-86,-27,86, 
  /* [45][0][][] */ -127,-110,-126,-51,-124,-4,-124,-86,119,-35,-9,118,42,35,120,-112, 
  /* [46][0][][] */ 81,80,-50,49,-42,-90,89,98,-53,39,-65,-85,-80,127,-73,92, 
  /* [47][0][][] */ 81,67,-27,60,127,57,48,4,-21,70,6,-60,0,40,-75,49, 
  /* [48][0][][] */ 33,94,-112,15,127,-5,109,92,-57,30,-81,-91,-22,-54,-83,98, 
  /* [49][0][][] */ -81,15,-72,93,-111,-101,26,71,-79,108,-28,3,127,49,127,21, 
  /* [50][0][][] */ 104,-83,-87,115,-115,-78,119,112,113,114,111,-127,98,113,-119,106, 
  /* [51][0][][] */ 107,104,-105,-127,-72,-77,97,87,-96,67,103,-95,-91,92,-45,86, 
  /* [52][0][][] */ -127,-85,98,97,-88,95,12,42,91,56,-73,80,112,59,-57,-106, 
  /* [53][0][][] */ 79,85,-13,50,37,127,67,63,42,22,73,4,89,113,-1,105, 
  /* [54][0][][] */ 124,120,-97,-38,40,34,102,76,-96,-14,29,-127,58,-91,-66,103, 
  /* [55][0][][] */ 69,127,41,-44,12,12,-7,31,-51,85,7,-114,6,87,-43,37, 
  /* [56][0][][] */ 113,120,54,-78,88,16,33,53,-65,-10,127,-118,54,55,-27,123, 
  /* [57][0][][] */ -32,20,-85,-115,29,-15,59,3,-127,-121,80,-5,66,-88,81,123, 
  /* [58][0][][] */ 125,127,-107,-54,20,-50,116,118,-54,125,105,-121,105,94,28,114, 
  /* [59][0][][] */ 108,59,-127,-76,-32,-45,58,-42,-86,-79,-88,-62,-54,-70,3,116, 
  /* [60][0][][] */ -75,-98,-14,-31,-38,-88,-120,-88,89,21,-74,106,66,52,127,-120, 
  /* [61][0][][] */ 127,99,-54,7,32,23,71,40,-112,-21,-13,-41,-31,-68,-87,95, 
  /* [62][0][][] */ -23,-45,81,16,0,103,-108,-66,127,3,-61,51,3,14,-12,-91, 
  /* [63][0][][] */ -28,16,109,-11,-48,-107,-30,74,-127,-8,25,-41,-127,96,52,45, 
  /* [64][0][][] */ -91,-110,74,96,-42,-49,3,-57,-108,84,-127,20,-95,28,62,35, 
  /* [65][0][][] */ -82,-90,64,-111,-44,99,-59,-102,83,-58,127,66,80,65,-16,-94, 
  /* [66][0][][] */ -47,-40,-13,3,-121,-71,-34,29,-22,-44,-87,35,-9,-49,127,0, 
  /* [67][0][][] */ 83,127,-42,-54,94,-30,92,55,-79,25,-57,-88,-43,-5,-100,78, 
  /* [68][0][][] */ -62,7,30,63,-38,-61,62,66,0,58,57,-19,-111,80,101,-127, 
  /* [69][0][][] */ 127,83,41,-59,86,34,-12,68,-74,11,8,-89,68,37,-65,90, 
  /* [70][0][][] */ 97,76,-97,-110,73,-103,84,-74,-82,-127,-95,-88,-89,-98,103,102, 
  /* [71][0][][] */ 72,116,-104,33,65,74,99,103,45,64,38,-126,20,6,-114,127, 
  /* [72][0][][] */ 28,52,127,47,4,-78,-119,-80,-60,-47,-90,-57,-65,-64,39,50, 
  /* [73][0][][] */ 55,124,38,70,-28,-51,-31,91,-65,72,75,-127,-77,20,-71,109, 
  /* [74][0][][] */ 46,109,24,76,127,98,20,5,-9,30,74,-90,-33,40,-116,60, 
  /* [75][0][][] */ 75,87,-104,127,-40,-80,79,73,-75,100,-86,-85,-72,93,-94,96, 
  /* [76][0][][] */ 106,127,-109,-107,12,-5,121,74,-50,44,71,-68,-93,-71,-41,108, 
  /* [77][0][][] */ -29,-47,14,-2,-112,-86,-28,14,32,34,-81,14,77,99,127,-84, 
  /* [78][0][][] */ 28,59,103,68,36,-2,-69,98,-60,-91,84,-50,-127,87,67,28, 
  /* [79][0][][] */ 104,-8,-116,-54,3,1,77,-49,-32,30,-110,-127,-9,-106,-65,116, 
  /* [80][0][][] */ 80,73,-94,64,123,-40,79,24,-71,74,-71,-91,127,-82,-116,62, 
  /* [81][0][][] */ -80,-110,8,56,-127,-20,-77,-65,83,-21,-18,91,-120,-58,63,-94, 
  /* [82][0][][] */ -1,-103,44,-125,127,111,15,-13,82,20,7,-35,127,31,-97,-76, 
  /* [83][0][][] */ 86,123,92,1,51,-14,116,51,-118,-41,120,-127,-31,49,-118,109, 
  /* [84][0][][] */ 102,94,-124,117,-8,-38,87,39,-79,127,-111,-103,0,23,-121,83, 
  /* [85][0][][] */ -4,-19,-33,87,-69,-73,-19,23,-23,-1,25,-2,101,36,124,-127, 
  /* [86][0][][] */ 86,93,-83,-77,85,-99,95,127,-32,-69,-54,-63,-98,91,-3,99, 
  /* [87][0][][] */ 90,59,37,-46,106,47,97,37,-90,6,13,-127,-27,-27,-98,39, 
  /* [88][0][][] */ -45,-89,74,-126,15,89,-9,-78,90,-127,61,-63,100,75,52,-83, 
  /* [89][0][][] */ -5,52,68,10,-11,-62,-55,40,-48,-106,46,-1,-127,-21,-13,23, 
  /* [90][0][][] */ 20,114,-16,-56,-16,-62,127,15,-106,-91,53,-60,69,33,77,85, 
  /* [91][0][][] */ -75,106,103,113,101,119,114,127,104,92,-98,-78,-94,109,-108,102, 
  /* [92][0][][] */ 125,85,-115,-37,-93,-47,85,127,-116,88,-54,-11,-92,-74,-104,98, 
  /* [93][0][][] */ -103,-72,127,-1,-57,-31,-107,-123,-90,-30,-15,66,-38,-36,91,-126, 
  /* [94][0][][] */ 108,98,42,106,79,48,108,89,-101,117,84,-96,27,114,-122,127, 
  /* [95][0][][] */ -91,29,-38,111,-95,-6,-62,-69,31,70,-60,-64,127,59,-86,-72, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 4.0771001295070164e-06, 0.00036583570181392133, 0.00075923744589090347, 3.4543605579528958e-05, 1.9583174434956163e-05, 0.0005495930090546608, 2.6666066332836635e-05, 7.4371455411892384e-05, 0.00014393027231562883, 3.6637429730035365e-05, 0.00060053064953535795, 8.3075603470206261e-05, 0.00010978239151882008, 0.00038060173392295837, 0.00020600850984919816, 2.0105206203879789e-05, 0.00012262981908861548, 1.7554564692545682e-05, 0.00049003056483343244, 0.00016573663742747158, 2.0863073586951941e-05, 0.00032705595367588103, 0.00015476260159630328, 0.0002665763022378087, 0.00012815849913749844, 0.00011784931120928377, 0.0006467921775765717, 3.3718370104907081e-06, 1.3923074220656417e-05, 7.9057303082663566e-05, 6.4446598116774112e-05, 1.1761707355617546e-05, 6.9339650508482009e-05, 0.0001320694136666134, 8.1388228863943368e-05, 6.0022706747986376e-05, 0.00015713604807388037, 9.4427496151183732e-06, 0.00034020861494354904, 0.00044761595199815929, 5.1748265832429752e-05, 3.9221264160005376e-05, 0.00022907860693521798, 6.0144034250697587e-06, 0.00011759961489588022, 4.0785089368000627e-05, 0.00012274492473807186, 0.00056635390501469374, 0.00013243238208815455, 6.6489345044828951e-05, 6.3567538745701313e-05, 7.6836651714984328e-05, 5.0710139475995675e-05, 9.4678849563933909e-05, 4.7985682613216341e-05, 3.2654868846293539e-05, 2.0834509996348061e-05, 0.0002401132951490581, 2.3489777959184721e-05, 2.8269649192225188e-05, 8.3964980149175972e-05, 4.9384769226890057e-05, 1.9004022760782391e-05, 0.00011491110490169376, 0.00017096959345508367, 8.5365805716719478e-05, 0.00021604837093036622, 3.0868683097651228e-05, 0.00013486362877301872, 0.00017841219960246235, 0.00010996453784173355, 1.0235530680802185e-05, 0.00016548378334846348, 0.00015223656373564154, 7.4504903750494123e-05, 0.00020046663121320307, 7.3566239734645933e-05, 1.2705721928796265e-05, 0.00014154668315313756, 0.00016694373334757984, 0.00025303938309662044, 2.003951340157073e-05, 3.3171734685311094e-05, 2.1530353478738107e-05, 0.00026090937899425626, 0.00020518913515843451, 0.00015129456005524844, 1.1217100109206513e-05, 3.3862943382700905e-05, 8.2868908066302538e-05, 7.6945863838773221e-05, 2.9486664061550982e-05, 8.2059908891096711e-05, 3.1761679565533996e-05, 4.282630470697768e-05, 0.00020083387789782137, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -1464351, -1091, -400, -100306, -308793, -12566, 91890, -22228, -14681, -176343, -1356, -31379, -86818, 7829, 10878, -162757, -26277, -7707, -12607, -46568, -103403, 5726, 9396, -12929, -25223, -44917, 4594, -1013475, -211927, -103313, -25055, -542323, -63292, -12871, -66044, -68329, -11856, -393786, -10381, -9165, -78556, -17494, -3244, -149997, 1570, -47023, -39096, -463, -3176, -103236, -122018, -68320, -141845, -55051, -43668, -166528, -125527, -14624, -379933, -60056, -85249, -42776, -252392, -53292, -47896, -25097, -4167, -70995, -48097, -10541, -42937, -277517, -18032, -24037, -32760, 1838, -72925, -92303, -23644, -13582, -7866, -191520, -89037, -97363, -3525, -1398, -12099, -165455, -78219, 3842, -66712, -306045, -56296, -222608, -138353, -29283, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 1.4676353430331801e-06, 0.00013169001613277942, 0.00027330301236361265, 1.2434675227268599e-05, 7.0493629209522624e-06, 0.00019783721654675901, 9.5989944384200498e-06, 2.6771522243507206e-05, 5.1810635341098532e-05, 1.3188389857532457e-05, 0.00021617325546685606, 2.9904756956966594e-05, 3.951841063098982e-05, 0.00013700535055249929, 7.4156960181426257e-05, 7.2372790782537777e-06, 4.414310387801379e-05, 6.3191237131832168e-06, 0.00017639649740885943, 5.9660280385287479e-05, 7.5100888352608308e-06, 0.00011773045844165608, 5.5709955631755292e-05, 9.5959578175097704e-05, 4.6133263822412118e-05, 4.2422263504704461e-05, 0.00023282603069674224, 1.2137614930907148e-06, 5.0118942453991622e-06, 2.8458287488319911e-05, 2.3198866983875632e-05, 4.2338665480201598e-06, 2.4960221708170138e-05, 4.7541077947244048e-05, 2.9297352739376947e-05, 2.1606396330753341e-05, 5.656432404066436e-05, 3.3991102554864483e-06, 0.00012246503320056945, 0.00016112848243210465, 1.8627843019203283e-05, 1.4118493709247559e-05, 8.246151264756918e-05, 2.1650071175827179e-06, 4.2332379962317646e-05, 1.4681424545415211e-05, 4.4184536818647757e-05, 0.00020387062977533787, 4.7671735956100747e-05, 2.3934195269248448e-05, 2.2882431949255988e-05, 2.765891986200586e-05, 1.8254148017149419e-05, 3.408158227102831e-05, 1.7273425328312442e-05, 1.1754786100937054e-05, 7.499806542909937e-06, 8.6433676187880337e-05, 8.4556249930756167e-06, 1.0176237083214801e-05, 3.0224906367948279e-05, 1.7777054381440394e-05, 6.8408853621804155e-06, 4.1364593926118687e-05, 6.1543993069790304e-05, 3.0729162972420454e-05, 7.7771015639882535e-05, 1.1111811545561068e-05, 4.8546913603786379e-05, 6.4223109802696854e-05, 3.9583977923030034e-05, 3.6844880924036261e-06, 5.9569261793512851e-05, 5.480065374285914e-05, 2.6819559934665449e-05, 7.2162052674684674e-05, 2.6481668101041578e-05, 4.5736837819276843e-06, 5.0952614401467144e-05, 6.0094800574006513e-05, 9.1086687461938709e-05, 7.2136313065129798e-06, 1.1940842341573443e-05, 7.7502900239778683e-06, 9.3919654318597168e-05, 7.3862014687620103e-05, 5.4461561376228929e-05, 4.0378240555583034e-06, 1.2189657354610972e-05, 2.9830353014403954e-05, 2.7698231860995293e-05, 1.0614326129143592e-05, 2.9539138267864473e-05, 1.1433264262450393e-05, 1.5416200767504051e-05, 7.2294249548576772e-05, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ -61,-82,-83,-99,-127,-87,-87,-76,-88,-66,-102,-93,-107,-69,-94,-78,-79,-75,-84,-91,-92,-99,-91,-83,-69,-96,-83,-67,-68,-80,-76,-90,-104,-77,-70,-92,-87,-85,-99,-90,-98,-95,-69,-95,-79,-89,-96,-72,-103,-63,-91,-69,-78,-102,-84,-80,-93,-98,-20,-81,-74,-67,-83,-90,-103,-102,-98,-79,-72,-88,-82,-72,-89,-84,-87,-73,-59,-92,-90,-118,-101,-71,-77,-83,-93,-96,-93,-93,-77,-80,-66,-64,-73,-80,-45,-21, 
  /* [1][0][][] */ -29,-112,-85,-76,-93,-124,-95,-75,-89,-85,-105,-90,-64,-119,-97,-115,-112,-112,-100,-120,-83,-88,-118,-107,-95,-94,-94,-104,-83,-41,-111,-30,-92,-121,-99,-121,-99,-112,-110,-80,-97,-75,-101,-100,-99,-101,-106,-97,-108,-127,102,-82,-91,-122,-105,-116,-95,-101,-16,-102,-58,-126,-108,-119,-89,-94,-98,-68,-101,-81,-79,-72,-98,-106,-107,-96,9,-115,-73,-113,-112,-84,-115,-75,-98,-94,-123,-80,-90,-113,-47,96,-76,-81,-70,-43, 
  /* [2][0][][] */ -108,-119,-122,-127,-115,-106,-96,-108,-104,-116,-118,-116,-99,-95,-119,-126,-123,-102,-115,-103,-123,-116,-103,-104,-121,-97,-115,-116,-112,-113,-121,-103,-100,-119,-100,-107,-121,-104,-120,-97,-98,-113,-90,-95,-118,-111,-100,-104,-110,-118,-107,-93,-122,-120,-107,-120,-115,-104,-95,-90,-92,-94,-118,-92,-90,-93,-120,-121,-108,-105,-97,-111,-102,-106,-110,-119,-93,-89,-124,-120,-122,-90,-95,-103,-120,-102,-101,-103,-96,-95,-95,-89,-116,-113,-95,-95, 
  /* [3][0][][] */ -120,-91,-97,-121,-90,-90,-95,-95,-90,-103,-100,-117,-90,-100,-89,-89,-127,-95,-116,-90,-119,-95,-120,-107,-89,-94,-124,-104,-98,-101,-114,-89,-124,-102,-103,-122,-122,-114,-121,-117,-122,-114,-118,-103,-119,-124,-112,-113,-116,-90,-108,-123,-105,-99,-91,-118,-121,-124,-96,-122,-121,-102,-122,-112,-105,-92,-116,-113,-113,-114,-93,-106,-93,-93,-116,-119,-127,-116,-94,-117,-98,-90,-120,-122,-95,-126,-91,-122,-113,-125,-92,-91,-122,-115,-102,-114, 
  /* [4][0][][] */ -35,-82,-69,-103,-58,-88,-91,-90,-87,11,-98,-87,-46,-56,-82,-105,-58,-74,-105,-119,-88,-78,-101,-80,-79,-74,-47,-62,-57,-64,-58,3,-43,-79,-60,-68,-54,-74,-113,-110,-51,-60,-102,-89,-96,-59,-76,-92,-70,-89,127,32,-44,-78,-67,-56,-90,-89,44,-89,3,-77,-80,-54,-83,-73,-103,-104,-93,-58,-39,-64,-74,-102,-63,-104,28,-63,-89,-94,-79,-79,-59,-70,-76,-58,-86,-82,-44,-75,-37,117,27,-29,-10,-9, 
  /* [5][0][][] */ 28,-63,-12,-25,-4,-96,40,-55,-74,31,39,-53,1,-3,59,24,18,15,-119,-69,-17,-5,35,35,-24,38,-9,-6,-23,25,-4,48,10,-33,48,12,40,45,-127,40,48,57,-31,33,-14,6,31,-19,-41,-2,92,59,15,2,-46,-14,-41,-64,46,58,40,-44,-12,13,-6,31,31,-48,11,-73,36,-5,11,-90,-54,12,53,50,43,-98,-12,34,-34,-33,-11,28,49,-29,49,17,0,93,42,35,49,66, 
  /* [6][0][][] */ -55,-110,-107,-117,-123,-117,-97,-119,-98,-75,-98,-86,-72,-114,-113,-84,-117,-91,-107,-101,-122,-89,-91,-100,-108,-90,-123,-126,-111,-107,-107,-63,-95,-102,-86,-84,-124,-112,-107,-94,-117,-97,-95,-105,-127,-90,-114,-113,-96,-91,105,-90,-118,-112,-117,-120,-117,-100,-70,-90,-78,-118,-90,-107,-80,-88,-109,-92,-108,-120,-100,-102,-88,-119,-93,-90,-72,-97,-113,-117,-103,-104,-111,-115,-95,-105,-104,-77,-102,-124,-107,6,-96,-84,-57,-108, 
  /* [7][0][][] */ -95,-100,-116,-126,-90,-110,-112,-117,-103,-120,-109,-112,-115,-89,-91,-98,-95,-108,70,-98,-95,-123,-109,-117,-91,-119,-98,-90,-122,-112,-110,-105,-127,-114,-97,-113,-89,-108,-107,-123,-125,-102,-117,-94,-105,-117,-122,-116,-97,-115,-113,-90,-115,-101,-98,-102,-98,-126,-108,-125,-104,-120,-115,-116,-108,-117,-125,84,-99,-125,-127,-106,-125,-96,-113,-96,-119,-115,-119,106,-124,-101,-106,-96,-117,-120,-111,-120,-99,-89,-89,-121,-102,84,-93,-125, 
  /* [8][0][][] */ -95,-110,-122,-108,-102,-112,-103,-119,-83,-82,-81,-111,-61,-115,-122,-95,-90,-81,-93,-127,-80,-92,-83,-108,-103,-118,-88,-112,-100,-100,-113,-54,-88,-102,-107,-68,-114,-112,-115,-111,-95,-96,-80,-104,-106,-105,-99,-84,-98,-84,97,-74,-55,-83,-101,-120,-91,-86,-17,-93,-96,-100,-127,-69,-107,-99,-97,-111,-113,-68,-81,-90,-78,-100,-85,-89,-19,-98,-100,-108,-90,-82,-95,-86,-88,-109,-96,-81,-65,-80,-87,-29,-96,-41,36,5, 
  /* [9][0][][] */ -113,-113,-104,-95,-103,-98,-94,-102,-105,-100,-96,-98,-91,-99,-112,-111,-109,-117,-118,-120,-122,-94,-104,-111,-120,-117,-114,-99,-97,-126,-112,-99,-122,-118,-89,-112,-112,-108,-119,-118,-91,-93,-107,-106,-101,-98,-103,-111,-112,-114,-123,-117,-124,-103,-103,-96,-108,-119,-105,-106,-107,-118,-102,-95,-127,-95,-96,-97,-91,-118,-125,-105,-99,-104,-97,-124,-90,-118,-105,-115,-125,-114,-94,-120,-98,-118,-121,-104,-119,-93,-102,-106,-121,-104,-103,-99, 
  /* [10][0][][] */ -123,-101,-120,-123,-115,-93,-127,-124,-95,-124,-94,-97,-109,-103,-96,-109,-90,-106,-121,-102,-109,-118,-114,-94,-102,-91,-113,-112,-125,-120,-110,-125,-98,-102,-90,-126,-89,-121,-101,-89,-94,-103,-103,-98,-110,-103,-108,-108,-121,-89,-93,-90,-92,-124,-92,-99,-105,-110,-95,-110,-96,-98,-92,-99,-114,-91,-108,-99,-107,-110,-96,-103,-123,-125,-104,-99,-96,-92,-95,-107,-108,-102,-106,-103,-105,-96,-121,-103,-110,-102,-117,-93,-100,-96,-104,-111, 
  /* [11][0][][] */ -44,-77,-95,-102,-80,-122,-94,-100,-99,-57,-82,-90,-82,-92,-79,-99,-99,-75,-124,-99,-94,-93,-78,-97,-94,-64,-73,-75,-85,-69,-83,-53,-60,-73,-97,-84,-84,-67,-127,-98,-76,-103,-68,-99,-74,-81,-94,-92,-84,-77,-88,-61,-80,-82,-91,-91,-91,-79,-70,-77,-71,-86,-70,-69,-77,-92,-75,-87,-76,-62,-93,-85,-98,-88,-81,-101,-57,-76,-97,-90,-100,-83,-102,-72,-87,-94,-93,-89,-95,-79,-83,-114,-48,-99,-30,-9, 
  /* [12][0][][] */ 83,55,-6,40,49,73,-54,71,63,123,-50,87,82,-31,-51,-26,-39,-19,30,109,26,-37,-39,-32,86,46,-24,33,105,99,-5,108,108,6,45,58,-36,-53,49,-39,-25,-36,29,-52,-15,-2,-1,-17,-22,59,8,127,15,96,105,95,105,52,83,-62,120,66,63,25,102,-47,-44,74,-22,80,59,69,-29,39,100,-41,82,-46,-36,58,-16,43,119,100,-19,-52,-54,83,2,-5,120,96,104,103,74,121, 
  /* [13][0][][] */ -98,-101,-94,-119,124,-104,-102,-118,-104,-126,-102,-103,-108,-94,-102,-96,-95,-99,-108,-94,-89,-111,-110,-121,-93,-122,107,-121,-103,83,-117,-110,-111,-126,-103,-109,-97,-126,-95,-101,-111,-119,-96,-93,-99,-110,-97,-97,-124,-94,-115,-108,-114,-124,-108,-93,-102,-117,-94,-120,-126,-110,-95,99,-123,-102,-115,-127,-124,91,-125,-92,-116,-111,-91,-113,-113,-93,-111,-117,-95,-101,-110,121,-92,-116,-127,-95,-117,-118,-103,-110,-97,-89,-113,93, 
  /* [14][0][][] */ 15,-90,-35,-22,-49,-116,-49,-64,-66,8,-50,-91,-52,-31,-65,-62,-71,-68,-107,-127,-56,-58,-71,-54,-76,-21,-17,-37,-38,-47,-44,29,-51,-48,25,-43,-50,-26,-99,-59,-18,-22,-22,-49,-57,-64,-34,-71,-106,-95,113,23,-54,-50,-35,-70,-61,-101,17,-75,-18,-93,-63,-58,-86,-33,-52,-59,-126,-44,-27,-52,-52,-104,-65,-76,43,-58,-37,-94,-38,-53,-43,-37,-78,-56,-77,-31,-2,-42,-46,112,24,-49,17,38, 
  /* [15][0][][] */ -40,-75,-85,-95,-98,-77,-85,-76,-98,-76,-69,-90,-96,-88,-91,-89,-88,-71,-127,-87,-87,-97,-91,-88,-77,-78,-68,-72,-85,-80,-97,-31,-48,-69,-118,-71,-87,-66,-92,-95,-87,-66,-69,-89,-72,-73,-83,-98,-81,-117,-83,-82,-124,-66,-78,-79,-81,-84,-2,-91,-85,-99,-95,-80,-116,-78,-87,-93,-116,-89,-90,-78,-69,-79,-86,-75,-61,-71,-98,-85,-88,-88,-92,-82,-91,-86,-69,-83,-74,-97,-86,-92,-72,-75,-40,-61, 
  /* [16][0][][] */ -109,-104,-124,-89,-94,-118,-91,-90,-114,-101,-94,-119,-116,-94,-127,-113,-102,-95,-117,-112,-127,-111,-125,-105,-90,-119,-120,-104,-116,-92,-90,-102,-121,-115,-105,-106,-110,-93,-127,-97,-100,-102,-95,-117,-123,-110,-124,-117,-112,-101,-92,-97,-114,-127,-99,-107,-101,-93,-115,-118,-101,-112,-108,-97,-110,-103,-96,-115,-108,-117,-95,-105,-95,-108,-100,-121,-95,-117,-123,-116,-112,-104,-109,-125,-93,-118,-108,-126,-90,-123,-92,-125,-100,-104,-96,-124, 
  /* [17][0][][] */ 46,-35,-42,-20,-95,-99,-23,-40,-55,-32,30,-98,-11,5,-27,-17,19,-18,-118,-107,-14,-5,-24,11,-110,-4,0,-72,-82,-52,7,28,12,-35,-38,-17,5,13,-91,44,18,34,-31,-11,0,-1,1,-21,-20,-127,111,1,-86,-5,-57,-35,-99,-38,-41,-15,49,-66,-22,-22,-63,36,-17,-35,-85,-79,-11,-25,18,-87,-68,-24,19,-17,42,-112,-25,-20,-35,-38,9,9,-8,-19,18,-16,-68,120,14,-42,26,9, 
  /* [18][0][][] */ 32,-79,-41,-42,-40,-106,-57,-112,-89,-30,-22,-112,-77,-10,-57,10,30,-20,-119,-127,-61,9,-28,21,-60,-22,19,-70,-76,-101,4,-22,-30,-20,6,-57,19,9,-122,17,2,-4,2,-22,-22,-9,13,-9,-12,-88,104,3,-64,-16,-91,-66,-74,-59,-50,7,-15,-76,-43,7,-88,36,-29,-109,-28,-65,-53,-32,-5,-57,-78,-32,32,-5,27,-102,-23,-33,-105,-54,2,-40,2,-63,2,-56,-107,81,16,-56,32,21, 
  /* [19][0][][] */ 40,-84,-63,-14,0,-75,18,-58,-56,30,-6,-57,17,-2,32,-5,21,-20,-127,-49,-40,-25,16,26,-6,21,-6,-7,-13,17,-9,29,19,-45,21,7,2,34,-113,31,32,43,-37,27,-38,-9,9,-14,-35,-17,80,41,22,-7,-40,-2,-44,-53,36,24,21,-43,-3,-8,-8,17,-5,-39,0,-58,13,-8,15,-81,-50,16,53,33,15,-88,-39,6,-14,-36,-21,11,49,-34,21,-8,-1,72,34,11,49,34, 
  /* [20][0][][] */ -109,-122,-111,-97,-92,-103,-94,-100,-117,-119,-104,-108,-106,-122,-108,-123,-110,-117,-90,-101,-98,-126,-92,-112,-125,-89,-121,-105,-107,-120,-116,-106,-101,-91,-94,-118,-91,-105,-125,-104,-91,-126,-122,-112,-100,-105,-114,-115,-94,-109,-88,-120,-107,-92,-103,-122,-117,-127,-96,-105,-113,-92,-96,-95,-102,-91,-102,-120,-102,-94,-120,-104,-123,-123,-114,-89,-109,-122,-101,-120,-105,-91,-93,-116,-99,-105,-120,-126,-89,-105,-126,-121,-97,-117,-103,-96, 
  /* [21][0][][] */ -95,-90,-89,-120,-112,-115,-121,-115,-112,-90,-103,-122,-115,-119,-123,-123,-112,-111,-119,-122,-113,-98,-89,-116,-91,-102,-94,-110,-117,-123,-90,-106,-122,-103,-91,-90,-125,-120,-125,-103,-106,-99,-114,-105,-119,-92,-127,-96,-96,-126,-108,-119,-97,-115,-125,-116,-112,-118,-93,-93,-105,-114,-108,-97,-114,-99,-118,-107,-108,-116,-109,-106,-113,-123,-116,-106,-121,-89,-89,-93,-114,-90,-107,-110,-127,-118,-104,-102,-114,-99,-118,-91,-112,-120,-90,-112, 
  /* [22][0][][] */ 102,-118,-97,-114,-122,76,-91,118,-100,-110,-113,104,-119,-102,-114,-127,-126,-110,-123,120,-100,-89,-112,-94,-125,-102,-121,-98,-116,-121,-120,93,91,-89,-103,-98,-104,-126,95,-121,-113,-110,-122,-108,-97,-116,-89,-122,93,103,-123,-95,-123,-88,-111,115,-89,-90,86,-93,93,-113,-109,-105,-93,-127,-125,-113,119,-91,-125,-116,-108,122,-122,-112,-126,-125,-99,100,-91,-122,89,97,-101,-94,-114,-89,-103,-92,-89,110,10,123,120,-95, 
  /* [23][0][][] */ 10,-76,-59,-62,-57,-83,-45,-53,-62,-16,-40,-87,-62,-32,-51,-64,-42,-53,-77,-96,-39,-45,-46,-50,-53,-29,-49,-66,-54,-47,-52,3,-12,-69,13,-62,-55,-22,-59,-60,-18,-39,-33,-66,-85,-51,-39,-40,-71,-57,85,18,-63,-14,-44,-58,-55,-61,39,-53,-14,-42,-35,-53,-40,-66,-52,-55,-61,-20,-23,-16,-11,-77,-42,-76,11,-48,-65,-100,-79,-27,-67,-62,-69,-63,-39,-70,-14,-69,-51,-127,18,-40,3,60, 
  /* [24][0][][] */ -46,-72,-73,-68,-82,-93,-102,-64,-86,-46,-92,-78,-43,-80,-88,-97,-89,-82,-101,-113,-62,-91,-87,-80,-90,-66,-97,-97,-75,-55,-68,-11,-46,-84,-87,-66,-82,-83,-94,-99,-77,-66,-96,-71,-95,-67,-65,-97,-99,-127,89,-43,-92,-33,-69,-85,-78,-89,-68,-90,-28,-84,-75,-91,-70,-82,-95,-71,-83,-99,-75,-72,-77,-106,-84,-93,-27,-90,-91,-75,-80,-85,-67,-78,-97,-92,-85,-84,-81,-72,-87,76,-59,-66,-35,-57, 
  /* [25][0][][] */ -111,106,-109,-96,-107,-101,-123,-100,-111,-97,-98,-99,-122,-95,-93,-124,-116,-110,-122,105,-97,-91,-113,-92,111,-121,-119,-117,-96,-96,-124,-97,-117,-119,-93,127,-126,-98,88,-89,-124,-90,-97,-107,-109,-122,-125,-126,-115,-103,92,-116,-110,83,-127,-119,-101,-113,124,-105,-120,-90,-124,-103,-119,-122,-123,-93,104,-107,-104,-98,-107,119,-112,-109,-104,-110,-103,92,-122,-109,-118,-101,-93,-106,-113,-100,-125,-91,96,103,-111,-91,124,-98, 
  /* [26][0][][] */ -95,-121,-108,-109,-94,-124,-91,-114,-100,-113,-122,-107,-114,-119,-102,-111,-91,-106,-121,-120,-100,-116,-96,-93,-109,-113,-100,-100,-104,-109,-116,-114,-112,-100,-101,-89,-108,-93,-127,-90,-92,-107,-113,-124,-109,-99,-89,-106,-105,-99,-93,-111,-91,-91,-97,-102,-94,-107,-118,-110,-105,-89,-122,-126,-99,-112,-125,-113,-108,-116,-103,-101,-126,-118,-122,-120,-111,-104,-111,-98,-90,-105,-116,-111,-110,-115,-109,-122,-104,-105,-93,-90,-116,-98,-100,-115, 
  /* [27][0][][] */ -98,-101,-126,-89,-113,-113,-107,-108,-123,-93,-113,-109,-127,-96,-95,-116,-101,-127,-110,-126,-112,-99,-94,-123,-127,-96,-115,-99,-93,-118,-98,-127,-90,-122,-102,-91,-90,-99,-120,-115,-102,-99,-112,-98,-97,-123,-91,-119,-111,-118,-98,-93,-90,-98,-127,-123,-93,-113,-113,-106,-102,-121,-126,-123,-103,-90,-104,-124,-101,-109,-103,-125,-104,-120,-107,-122,-122,-109,-96,-105,-118,-121,-93,-107,-125,-123,-99,-113,-90,-105,-100,-90,-93,-103,-97,-125, 
  /* [28][0][][] */ 17,-75,-55,-34,-41,-86,-18,-66,-66,29,-16,-69,-7,-39,-6,-37,-10,-27,-127,-105,-27,-20,0,-16,-39,-3,8,-10,-43,5,-29,57,-6,-53,21,-39,-6,30,-106,21,0,5,-45,6,-36,-12,0,-29,-51,-69,88,58,7,-20,-48,-34,-51,-67,62,13,29,-65,-42,-27,-61,5,8,-71,-64,-42,22,-9,-16,-88,-46,-26,80,-10,-2,-120,-43,3,-58,-46,-22,7,-19,-58,12,-28,-10,92,56,14,45,77, 
  /* [29][0][][] */ 4,-4,-101,4,-112,-106,-103,-127,-117,-6,-116,-122,-89,-4,-121,-112,-90,-88,-117,-90,-102,-119,-121,-123,-92,-11,-125,-8,-115,-91,-118,5,-18,20,-88,0,-5,-17,-103,-5,20,-9,-111,-99,-114,-97,-20,-107,-112,-95,4,-92,-14,-2,-92,16,-99,-111,-11,-76,20,18,-120,-100,-94,-15,-123,-101,-95,-109,-105,-115,-110,-21,-111,-124,-117,-99,0,11,-108,-114,-102,-112,-103,-126,-12,-92,-3,6,-13,-10,-18,-107,-12,-118, 
  /* [30][0][][] */ -52,-113,-77,-49,-47,-70,31,-80,-87,31,33,-62,27,-31,4,-2,51,10,-106,-94,-33,-16,36,11,-53,7,-16,-24,-12,20,-10,54,-47,-57,20,-33,6,26,-90,40,32,27,-43,10,-21,5,-5,-8,-60,-15,90,45,-4,-49,-41,-90,-36,-41,61,32,1,-79,-28,-3,-37,54,33,-54,-2,-39,43,-50,32,-120,-96,8,84,20,37,-127,4,-6,-34,-41,8,17,52,-24,53,-8,-5,86,31,24,52,46, 
  /* [31][0][][] */ -101,-88,-96,-113,-118,-108,-92,-120,-120,-115,-97,-117,-120,-121,-92,-104,-108,-99,-112,-102,-111,-114,-92,-106,-97,-93,-114,-117,-110,-94,-98,-96,-95,-102,-98,-91,-100,-90,-110,-120,-108,-91,-122,-101,-103,-91,-100,-108,-124,-111,-116,-97,-103,-121,-109,-108,-106,-102,-102,-89,-108,-127,-89,-124,-103,-122,-95,-118,-125,-102,-90,-112,-95,-118,-113,-98,-108,-94,-98,-120,-108,-110,-125,-120,-112,-95,-89,-123,-118,-93,-101,-111,-115,-113,-125,-97, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.014652837999165058, 0.011519055813550949, 0.011102348566055298, 0.011140665970742702, 0.011008205823600292, 0.014986089430749416, 0.010977205820381641, 0.011138150468468666, 0.011502327397465706, 0.011159257031977177, 0.011126197874546051, 0.014185483567416668, 0.013699119910597801, 0.011105616576969624, 0.010116140358150005, 0.014794678427278996, 0.011111224070191383, 0.010557373054325581, 0.01073224563151598, 0.016845425590872765, 0.011125264689326286, 0.011132208630442619, 0.011144698597490788, 0.012984701432287693, 0.014176384545862675, 0.011124357581138611, 0.0111205093562603, 0.011127680540084839, 0.011220534332096577, 0.010338559746742249, 0.011331452988088131, 0.011155047453939915, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -3731, -4380, -4598, -4582, -3768, 4083, -4559, -4582, -4324, -4574, -4588, -3734, -1799, -4588, -2756, -3624, -4594, -2384, -3695, 2977, -4588, -4584, -4576, -2631, -3674, -4585, -4590, -4587, -591, -4527, 1962, -4576, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 0.00034477267763577402, 0.00027103660977445543, 0.00026123173302039504, 0.00026213331148028374, 0.00025901661138050258, 0.00035261388984508812, 0.00025828721118159592, 0.0002620741433929652, 0.00027064300957135856, 0.0002625707711558789, 0.00026179288397543132, 0.00033377608633600175, 0.00032233222736977041, 0.00026130862534046173, 0.00023802684154361486, 0.00034811010118573904, 0.00026144058210775256, 0.00024840878904797137, 0.00025252343039028347, 0.00039636297151446342, 0.00026177093968726695, 0.00026193432859145105, 0.00026222821907140315, 0.00030552237876690924, 0.00033356199855916202, 0.00026174960657954216, 0.0002616590354591608, 0.00026182777946814895, 0.00026401257491670549, 0.00024326023412868381, 0.00026662243180908263, 0.00026247170171700418, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -104,-102,82,82,-68,-7,-67,99,-88,71,69,-108,73,90,-4,-97,70,10,-127,16,122,87,126,8,-101,123,101,67,46,-25,-68,102, 
  /* [1][0][][] */ -85,-81,94,99,-107,38,-115,107,-100,90,94,-96,1,127,-72,-88,94,-9,-26,28,101,126,120,-58,-84,124,97,94,20,-84,14,86, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.012186160311102867, 0.0094861658290028572, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 9221, -3042, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00052522670011967421, 0.00040885625639930367, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.28968200087547302, } };
const TfArray<1, int> quant46_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.2788642942905426, } };
const TfArray<1, int> quant50_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.23296540975570679, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.3981669545173645, } };
const TfArray<1, int> quant54_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.22748494148254395, } };
const TfArray<1, int> quant58_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.18679848313331604, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27452296018600464, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.15054300427436829, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35997039079666138, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.043100263923406601, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.040219850838184357, } };
const TfArray<1, int> quant69_zero = { 1, { -97 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
